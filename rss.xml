<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    
    <title><![CDATA[Meteor Fan (日本語情報)]]></title>
    <link>http://meteor-fan.axlight.com//</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    <description><![CDATA[JavaScriptフレームワークMeteorに関して概要、チュートリアル、開発方法、便利パッケージ、Tipsなどを紹介する日本語情報サイト]]></description>
    <pubDate>Thu, 27 Aug 2015 13:31:30 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title><![CDATA[MeteorをHerokuにデプロイする方法]]></title>
      <link>http://meteor-fan.axlight.com/deploy-meteor-on-heroku/</link>
      <guid>http://meteor-fan.axlight.com/deploy-meteor-on-heroku/</guid>
      <pubDate>Thu, 27 Aug 2015 12:35:36 GMT</pubDate>
      <description>
      <![CDATA[<p>Meteorアプリは、meteor.comにデプロイする場合はコマンド一つなので楽ですが、その他にデプロイしようとすると意外と大変です。Meteorを普通のnode.jsアプリに変換するツールとして<a href="https://github.com/onmodulus/]]>
      </description>
      <content:encoded><![CDATA[<p>Meteorアプリは、meteor.comにデプロイする場合はコマンド一つなので楽ですが、その他にデプロイしようとすると意外と大変です。Meteorを普通のnode.jsアプリに変換するツールとして<a href="https://github.com/onmodulus/demeteorizer" target="_blank" rel="external">demeteorizer</a>や<a href="https://github.com/arunoda/meteor-up" target="_blank" rel="external">meteor-up</a>がありますが、今回はHerokuに限定した方法を紹介します。</p>
<h2 id="Heroku_custom_buildpack">Heroku custom buildpack</h2><p><a href="https://www.heroku.com/" target="_blank" rel="external">Heroku</a>には<a href="https://devcenter.heroku.com/articles/buildpacks" target="_blank" rel="external">buildpack</a>というgit pushしたデータをコンパイルなどして環境を作る仕組みがあります。RubyやNode.jsなど標準的なものはDefault buildpacksとして提供されているのですが、APIが公開されていて第三者が作る<a href="https://devcenter.heroku.com/articles/third-party-buildpacks" target="_blank" rel="external">Third-Party Buildpacks</a>というものがあります。</p>
<h2 id="Meteor_Buildpack_Horse">Meteor Buildpack Horse</h2><p><a href="https://github.com/AdmitHub/meteor-buildpack-horse" target="_blank" rel="external">Meteor Buildpack Horse</a>はHerokuのMeteor用buildpackです。類似buildpackが乱立していたようですが、今のところこれがメンテされているようです。</p>
<p>これを使うと拍子抜けするくらい簡単です。使い方を見てみましょう。</p>
<h2 id="使い方">使い方</h2><p>HerokuでMeteor以外のNode.jsアプリをデプロイしたことがある前提で説明します。</p>
<p>初めにHerokuでアプリを作成します。Webインタフェースでもできますが、CLIでは下記のようにすると思います。</p>
<pre><code>heroku <span class="built_in">create</span> myapp
</code></pre><p>Meteor Buildpack Horseを設定します。(アプリのowner権限が必要)</p>
<pre><code>heroku <span class="string">buildpacks:</span>set <span class="string">https:</span><span class="comment">//github.com/AdmitHub/meteor-buildpack-horse.git</span>
</code></pre><p>MeteorはMongoDBを使うので、そのためのアドオンを追加します。Webインタフェースでもできます。</p>
<pre><code><span class="label">heroku</span> <span class="keyword">addons:create </span>mongolab
</code></pre><p>最後に一つだけ設定しなければいけない環境変数があります。</p>
<pre><code>heroku <span class="string">config:</span>set ROOT_URL=<span class="string">https:</span><span class="comment">//myapp.herokuapp.com</span>
</code></pre><p>URLの中身は適切に変えましょう。これもWebインタフェースから設定できます。</p>
<p>さて、以上で設定は終わりであとは通常と同じくgit pushすればよいだけです。</p>
<pre><code><span class="label">git</span> <span class="keyword">push </span>heroku master
</code></pre><p>リモートリポジトリherokuの設定が正しくされている前提です。</p>
<h2 id="感想">感想</h2><p>一度設定してしまえば、あとは普通のnode.jsアプリと何ら変わらないのでとても自然です。buildpacksすばらしい。ただ、Meteorの仕様が変わってうまく動かなくなる可能性はあるので注意は必要です。頻繁に最新情報をチェックするのがよいでしょう。</p>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/deploy-meteor-on-heroku/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[フォームを簡単に生成するMeteorパッケージ「AutoForm」]]></title>
      <link>http://meteor-fan.axlight.com/meteor-autoform/</link>
      <guid>http://meteor-fan.axlight.com/meteor-autoform/</guid>
      <pubDate>Sun, 23 Aug 2015 12:55:18 GMT</pubDate>
      <description>
      <![CDATA[<p>MeteorでFormを簡単に作るパッケージを紹介します。</p>
<p>管理系のUIを作成する場合には、Meteorのコレクションを操作するためのフォームを作成することがよくあると思います。普通に開発してもそれほど手間はかかりませんが、より手軽に開発できるとよいです。フォ]]>
      </description>
      <content:encoded><![CDATA[<p>MeteorでFormを簡単に作るパッケージを紹介します。</p>
<p>管理系のUIを作成する場合には、Meteorのコレクションを操作するためのフォームを作成することがよくあると思います。普通に開発してもそれほど手間はかかりませんが、より手軽に開発できるとよいです。フォームのバリデーションも簡単にできるよよいです。そのようなことを実現するパッケージを紹介します。</p>
<h2 id="AutoFormとは">AutoFormとは</h2><p>AutoForm(<a href="https://atmospherejs.com/aldeed/autoform" target="_blank" rel="external">Atomosphere</a>, <a href="https://github.com/aldeed/meteor-autoform" target="_blank" rel="external">GitHub</a>)は、とても簡単にフォームを作成できるMeteorパッケージです。スキーマの定義は依存パッケージである<a href="https://github.com/aldeed/meteor-simple-schema" target="_blank" rel="external">SimpleSchema</a>で実現しており、また<a href="https://github.com/aldeed/meteor-collection2" target="_blank" rel="external">Collections2</a>を使うとサーバ側でのバリデーションも自動で行われるようにできます。本記事ではCollection2は使わずに紹介します。</p>
<p>インストールは、</p>
<pre><code><span class="label">meteor</span> <span class="keyword">add </span>aldeed:autoform
</code></pre><p>でできます。パッケージで提供されている標準フォームタイプ以外にも外部パッケージで様々な追加タイプがサポートされています。詳細は<a href="https://github.com/aldeed/meteor-autoform#community-add-on-packages" target="_blank" rel="external">AutoFormのREADME</a>を参照してください。</p>
<p>とりあえずどんなことができるのかは<a href="http://autoform.meteor.com/" target="_blank" rel="external">デモサイト</a>を見ると分かりやすいです。</p>
<h2 id="簡単な使い方">簡単な使い方</h2><p>最も簡単な例として、氏名を入力するフォームを考えます。まずはコレクションの定義をします。</p>
<pre><code><span class="keyword">var</span> Names = <span class="keyword">new</span> Mongo.Colleciton(<span class="string">'names'</span>);
</code></pre><p>次にスキーマの定義をします。</p>
<pre><code><span class="built_in">var</span> NamesSchema = <span class="literal">new</span> SimpleSchema({
  lastname: {
    <span class="keyword">type</span>: <span class="built_in">String</span>,
label: <span class="string">'姓'</span>
  },
  firstname: {
    <span class="keyword">type</span>: <span class="built_in">String</span>,
label: <span class="string">'名'</span>
  }
};
</code></pre><p>最後にHTMLでテンプレートを呼び出します。</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="expression">&#123;&#123;&gt; <span class="variable">quickForm</span> <span class="variable">id</span>=<span class="string">"insert-form"</span> <span class="variable">schema</span>=<span class="variable">NamesSchema</span> <span class="variable">type</span>=<span class="string">"insert"</span>&#125;&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
<p>へルパーの設定がどこかに必要です。例えば、グローバルへルパーの場合は、</p>
<pre><code><span class="keyword">if</span> <span class="params">(Meteor.isClient<span class="params">()</span>)</span> {
  Template.registerHelper<span class="params">('NamesSchema', NamesSchema)</span>;
}
</code></pre><p>のようにします。</p>
<p>以上のコードでフォームが作成されます。下記に補足を述べます。</p>
<ul>
<li>デフォルトではBootstrapのスタイルが適用されています</li>
<li>insecureパッケージが削除されている場合は、<a href="http://docs.meteor.com/#/full/allow" target="_blank" rel="external">allow()</a>で適切に権限が設定されている必要があります</li>
<li>ほぼ同様に <code>type=&quot;update&quot;</code> もできます</li>
</ul>
<h2 id="もう少し柔軟な使い方">もう少し柔軟な使い方</h2><p>上記の例は簡単ですが、もっと表示をカスタマイズしたい場合があるでしょう。また、<a href="http://meteor-fan.axlight.com/meteor-tutorial-blaze/">Meteorのチュートリアル</a>に沿って学習した場合、allowより<a href="http://docs.meteor.com/#/full/meteor_methods" target="_blank" rel="external">Meteor.methods</a>を使う方が慣れているでしょう。</p>
<p>下記のように書くことができます。</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="expression">&#123;&#123;<span class="begin-block">#autoForm id</span>=<span class="string">"insert-form"</span> <span class="variable">schema</span>=<span class="variable">NamesSchema</span> <span class="variable">type</span>=<span class="string">"method"</span> <span class="variable">meteormethod</span>=<span class="string">"insertName"</span>&#125;&#125;</span><span class="xml"></span><br><span class="line">  </span><span class="expression">&#123;&#123;&gt; <span class="variable">afQuickField</span> <span class="variable">name</span>=<span class="string">"lastname"</span>&#125;&#125;</span><span class="xml"></span><br><span class="line">  </span><span class="expression">&#123;&#123;&gt; <span class="variable">afQuickField</span> <span class="variable">name</span>=<span class="string">"firstname"</span>&#125;&#125;</span><span class="xml"></span><br><span class="line">  <span class="tag">&lt;<span class="title">buttont</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">class</span>=<span class="value">"btn btn-primary"</span>&gt;</span>保存<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>この場合、次のようなmethodが定義されている必要があります。</p>
<pre><code>Meteor.methods({
  insertName: <span class="keyword">function</span>(<span class="annotation">doc</span>) {
    <span class="comment">// 必要であれば権限の確認をまず行う</span>
    check(<span class="annotation">doc</span>, NamesSchema);
    Names.insert(<span class="annotation">doc</span>);
  }
});
</code></pre><p>下記に補足を述べます。</p>
<ul>
<li>上記例ではUIは変化がありませんが、いじりやすくはなっています</li>
<li>Meteor.methodsを使う場合は自前でチェックなどを実装する必要があります</li>
<li>updateについてもだいただ同様に実現することができます</li>
</ul>
<h2 id="さらに高度な使い方">さらに高度な使い方</h2><p>AutoFormはカスタマイズ可能なように多くのテンプレートが用意されており、様々なオプションを指定できます。また、処理のフックも多く柔軟な対応が可能です。あまりに多くて書ききれないため、<a href="https://github.com/aldeed/meteor-autoform#component-and-helper-reference" target="_blank" rel="external">AutoFormのREADME</a>を参照してください。</p>
<p>ところで、<a href="https://forums.meteor.com/t/good-alternative-for-autoform/1973" target="_blank" rel="external">Meteor Forum</a>では、AutoFormの代替について議論されています。AutoFormは大きすぎるのか多少問題も含んでいるとのことです。一つの案として、<a href="https://github.com/aldeed/meteor-simple-schema" target="_blank" rel="external">SimpleSchema</a>を直接使う案が提示されており、考慮の価値があるかもしれません。また、<a href="https://atmospherejs.com/templates/forms" target="_blank" rel="external">https://atmospherejs.com/templates/forms</a>も紹介されています。</p>
<h2 id="感想">感想</h2><p>Meteorの精神ではコード量は少なくアプリを開発できるとよいと思うので、その意味でこのパッケージは使い出がありそうです。アプリをある程度開発してから導入するのは手間がかかるので、初めから使う方がよいと思います。AutoFormの流儀に乗っ取れば大幅にコード量を削減できるでしょう。</p>
<p>カスタマイズ性が高いことは大変すばらしく再利用性も上がりそうですが、一方でカスタマイズを増やすと、コードとしてはかえって分かりにくくなるかもしれません。コード量が変わらないのであれば、Blaze標準機能だけで実装した方がブラックボックスがない分理解しやすい可能性があります。このあたりはトレードオフになりそうです。</p>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/meteor-autoform/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[MeteorとPostgreSQLの連携プレビュー]]></title>
      <link>http://meteor-fan.axlight.com/meteor-postgres-preview/</link>
      <guid>http://meteor-fan.axlight.com/meteor-postgres-preview/</guid>
      <pubDate>Sat, 22 Aug 2015 03:12:03 GMT</pubDate>
      <description>
      <![CDATA[<p>本記事では、Meteor公式ブログの<a href="http://info.meteor.com/blog/an-early-look-at-sql-in-meteor" target="_blank" rel="external">An early look at SQ]]>
      </description>
      <content:encoded><![CDATA[<p>本記事では、Meteor公式ブログの<a href="http://info.meteor.com/blog/an-early-look-at-sql-in-meteor" target="_blank" rel="external">An early look at SQL in Meteor</a>の概要を紹介します。</p>
<h2 id="SQL連携について">SQL連携について</h2><p><a href="http://meteor-fan.axlight.com/meteor-12-coming/">2015年夏に登場予定のMeteor v1.2</a>で紹介したように、MeteorではSQLをサポートしようとしています。いつになるかは記載されいませんが、開発チームは既に検討を開始しているようです。</p>
<p>MeteorはそもそもデータベースとしてMongoDBを使うことを前提に作られているため、どのようにSQL連携を実現するかは議論中とのことです。そこでプロトタイプを作って評価するというやり方にしたと。</p>
<h2 id="PostgreSQLサポートのプロトタイプ">PostgreSQLサポートのプロトタイプ</h2><p>今回、第一バージョンができあがったとのことでアナウンスがありました。特徴は、</p>
<ol>
<li>クエリの即時アップデート</li>
<li>クライアント側とサーバ側で類似のコードを動かせる</li>
<li>Optimistic UI</li>
<li>Fibersによる同期的API</li>
</ol>
<p>であり、これまでのMeteorの特徴が引き継がれているようです。より詳細な情報は下記のサイトから参照してください。</p>
<p><a href="http://meteor-postgres.readthedocs.org/en/latest/" target="_blank" rel="external">http://meteor-postgres.readthedocs.org/en/latest/</a></p>
<h2 id="開発者募集">開発者募集</h2><p>プロトタイプを作って評価することが目的ですので、開発者に参加を呼びかけています。具体的には、</p>
<ul>
<li>上記のサイトを読んで、サンプルを試してみる</li>
<li><a href="https://forums.meteor.com/t/an-early-look-at-sql-in-meteor/8736" target="_blank" rel="external">forums</a>に参加して議論する</li>
<li><a href="https://github.com/meteor/postgres-packages" target="_blank" rel="external">GitHub</a>にissueを登録する</li>
</ul>
<p>が期待されているとのこと。</p>
<p>最後にpublishを定義しているサンプルコードのスクリーンショットがこちらです。</p>
<p><img src="http://cdn2.hubspot.net/hub/520701/hubfs/Blog/Screenshot_2015-08-21_16.03.25.png" alt="スクリーンショット"></p>
<h2 id="感想">感想</h2><p>個人的にはMeteorを初めて使う人は素直にMongoDBを使う方がよいと思います。設計としても分かりやすいはずです。どうしても過去のレガシーなシステムと接続しなければならないときにSQLを使うケースがきっとあって、SQL連携によりMeteorのコミュニティが拡大することにはメリットがあるでしょう。開発チームはSQL連携においてもMeteor流は妥協しないようで、今後も期待します。</p>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/meteor-postgres-preview/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Meteorを選ぶ7つの理由]]></title>
      <link>http://meteor-fan.axlight.com/7-reasons-to-choose-meteor/</link>
      <guid>http://meteor-fan.axlight.com/7-reasons-to-choose-meteor/</guid>
      <pubDate>Mon, 17 Aug 2015 14:14:15 GMT</pubDate>
      <description>
      <![CDATA[<p>2014年の記事ですが、<a href="http://www.sitepoint.com/7-reasons-develop-next-web-app-meteor/" target="_blank" rel="external">7 Reasons to Develop]]>
      </description>
      <content:encoded><![CDATA[<p>2014年の記事ですが、<a href="http://www.sitepoint.com/7-reasons-develop-next-web-app-meteor/" target="_blank" rel="external">7 Reasons to Develop Your Next Web App with Meteor</a>で、なぜMeteorでアプリを開発するか、7つの理由が書かれているので簡単に紹介します。</p>
<h2 id="1-_標準でリアルタイムアプリが作れる">1. 標準でリアルタイムアプリが作れる</h2><p>現状、リアルタイムWebアプリを作るにはとても手間がかかります。例外は、Meteorを使う場合です。Meteorでは、普通にコーディングするだけでリアルタイムアプリになります。</p>
<h2 id="2-_一つのプログラミング言語だけで作れる">2. 一つのプログラミング言語だけで作れる</h2><p>クライアントサイド、サーバサイド、データベースがすべてJavaScriptです。JavaScriptを学ぶだけで済みます。また、クライアントサイドとサーバサイドでコードを共通化することもできます。</p>
<h2 id="3-_便利なパッケージで時間を節約できる">3. 便利なパッケージで時間を節約できる</h2><p>例えば、accounts-twitterというパッケージがありますが、これを使うとアプリにTwitter認証を簡単に組み込むことができます。Twitter認証以外にも、Facebook認証やGoogle認証など、また認証以外にも様々なパッケージが用意されています。</p>
<h2 id="4-_コミュニティがとても協力的である">4. コミュニティがとても協力的である</h2><p>コミュニティがとても活発であり、技術が近い将来行き詰まることはないでしょう。情報源もとても増えています。(日本語情報だとそれほど感じられないかもしれません。そのための、Meteor Fanですね)</p>
<h2 id="5-_開発者の幸せのために最適化されている">5. 開発者の幸せのために最適化されている</h2><p>ファイル配置の柔軟性やファイルの自動結合やホットコードプッシュなど開発者がより楽しくなるように作り込まれています。</p>
<h2 id="6-_初心者の開発者にやさしい">6. 初心者の開発者にやさしい</h2><p>Meteorは初心者にとって学習しやすいプラットフォームです。プログラミングは必須ですが、JavaScriptの基本が分かれば大丈夫です。</p>
<h2 id="7-_技術トレンドの先をいっている">7. 技術トレンドの先をいっている</h2><p>リアルタイムWebはへの変化は、大きな会社が大きな予算で開発して実現するだけでは不十分です。ツールによって誰もが実現できるようになって起こる変化です。Meteorはこれを実現する初めてのツールです。</p>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/7-reasons-to-choose-meteor/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Meteor日本語チュートリアル (Blaze)]]></title>
      <link>http://meteor-fan.axlight.com/meteor-tutorial-blaze/</link>
      <guid>http://meteor-fan.axlight.com/meteor-tutorial-blaze/</guid>
      <pubDate>Fri, 14 Aug 2015 12:37:19 GMT</pubDate>
      <description>
      <![CDATA[<p><a href="https://www.meteor.com/" target="_blank" rel="external">Meteor</a>の日本語版のチュートリアルです。</p>
<p><a href="https://www.meteor.com/tutori]]>
      </description>
      <content:encoded><![CDATA[<p><a href="https://www.meteor.com/" target="_blank" rel="external">Meteor</a>の日本語版のチュートリアルです。</p>
<p><a href="https://www.meteor.com/tutorials/blaze" target="_blank" rel="external">公式のチュートリアル</a>を元にしていますが、単なる翻訳ではなく多少アレンジしています。</p>
<h2 id="コンテンツ">コンテンツ</h2><ol>
<li><a href="http://meteor-fan.axlight.com/creating-first-meteor-app/" target="_blank">初めてのMeteorアプリ作成</a></li>
<li><a href="http://meteor-fan.axlight.com/first-spacebars-template/" target="_blank">初めてのMeteor Spacebarsでテンプレート</a></li>
<li><a href="http://meteor-fan.axlight.com/first-meteor-mongo/" target="_blank">初めてのMeteor Mongoコレクション</a></li>
<li><a href="http://meteor-fan.axlight.com/first-meteor-forms/" target="_blank">初めてのフォームとイベント処理</a></li>
<li><a href="http://meteor-fan.axlight.com/first-collection-update-in-meteor/" target="_blank">Meteorで初めてのコレクション更新と削除</a></li>
<li><a href="http://meteor-fan.axlight.com/deploying-first-meteor-app/" target="_blank">初めてのMeteorアプリのデプロイ</a></li>
<li>Meteorで初めてのモバイルアプリ (スキップ)</li>
<li><a href="http://meteor-fan.axlight.com/first-session-variables-in-meteor/" target="_blank">Meteorで初めてのセッション変数</a></li>
<li><a href="http://meteor-fan.axlight.com/first-user-accounts-in-meteor/" target="_blank">Meteorで初めてのユーザアカウント</a></li>
<li><a href="http://meteor-fan.axlight.com/first-permission-control-in-meteor/" target="_blank">Meteorで初めてのパーミッション制御</a></li>
<li><a href="http://meteor-fan.axlight.com/first-data-filtering-in-meteor/" target="_blank">Meteorで初めてのデータフィルタリング制御</a></li>
</ol>
<h2 id="注意事項">注意事項</h2><ul>
<li>本チュートリアルはMeteor v1.1.0.3時点のものです</li>
<li>本チュートリアルはBlazeと呼ばれるテンプレートエンジンを対象にしたものです</li>
<li>本チュートリアルの正確性は保証されません、もし間違いなど発見しましたら @dai_shi までご連絡ください</li>
</ul>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/meteor-tutorial-blaze/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Meteorで初めてのデータフィルタリング制御]]></title>
      <link>http://meteor-fan.axlight.com/first-data-filtering-in-meteor/</link>
      <guid>http://meteor-fan.axlight.com/first-data-filtering-in-meteor/</guid>
      <pubDate>Fri, 14 Aug 2015 03:49:56 GMT</pubDate>
      <description>
      <![CDATA[<p>本記事は<a href="https://www.meteor.com/tutorials/blaze/publish-and-subscribe" target="_blank" rel="external">公式チュートリアル11</a>の内容に沿って説明するものです。]]>
      </description>
      <content:encoded><![CDATA[<p>本記事は<a href="https://www.meteor.com/tutorials/blaze/publish-and-subscribe" target="_blank" rel="external">公式チュートリアル11</a>の内容に沿って説明するものです。</p>
<h2 id="チュートリアルの目次">チュートリアルの目次</h2><ol>
<li><a href="http://meteor-fan.axlight.com/creating-first-meteor-app/">初めてのMeteorアプリ作成</a></li>
<li><a href="http://meteor-fan.axlight.com/first-spacebars-template/">初めてのMeteor Spacebarsでテンプレート</a></li>
<li><a href="http://meteor-fan.axlight.com/first-meteor-mongo/">初めてのMeteor Mongoコレクション</a></li>
<li><a href="http://meteor-fan.axlight.com/first-meteor-forms/">初めてのフォームとイベント処理</a></li>
<li><a href="http://meteor-fan.axlight.com/first-collection-update-in-meteor/">Meteorで初めてのコレクション更新と削除</a></li>
<li><a href="http://meteor-fan.axlight.com/deploying-first-meteor-app/">初めてのMeteorアプリのデプロイ</a></li>
<li>Meteorで初めてのモバイルアプリ (スキップ)</li>
<li><a href="http://meteor-fan.axlight.com/first-session-variables-in-meteor/">Meteorで初めてのセッション変数</a></li>
<li><a href="http://meteor-fan.axlight.com/first-user-accounts-in-meteor/">Meteorで初めてのユーザアカウント</a></li>
<li><a href="http://meteor-fan.axlight.com/first-permission-control-in-meteor/">Meteorで初めてのパーミッション制御</a></li>
<li>Meteorで初めてのデータフィルタリング制御</li>
</ol>
<p>今回でこの一連のチュートリアルは終わりです。</p>
<h2 id="データの読み込み権限について">データの読み込み権限について</h2><p><a href="http://meteor-fan.axlight.com/first-permission-control-in-meteor/">前回のチュートリアル</a>では、パーミッションの制御について学びました。明確には述べませんでしたが、このパーミッション制御は書き込み権限に関するものでした。読み込みに関しては、Meteor.methodsでは制御できません。</p>
<p>Meteorにおけるデータの読み込みは、<a href="https://www.meteor.com/ddp" target="_blank" rel="external">DDP</a>によって裏で行なわれます。そのため、書き込みの時のようにAPI呼び出しにおける制御とは別の方法で制御します。それがpublishとsubscribeです。publishはサーバがから送信するデータを指示し、subscribeでそれを受信します。通常の(例えばRESTでよく行う)Request-Response型の通信形態とは逆向きになります。</p>
<p>前回までのチュートリアルではpublish/subscribeは気にする必要がありませんでしたが、それはautopublishというパッケージのおかげです。autopublishはコレクションのすべてをサーバがpublishして、クライアントがそれをsubscribeするという仕組みです。</p>
<p>autopublishはサーバのデータをすべてクライアントにコピーするものです。もしアプリの設計としてデータサイズが小規模でデータがすべて見えて構わない場合は、autopublishを使い続けることでも問題ないはずです。</p>
<p>一方、データの一部のみを見せたい場合は、autopublishではなく独自のpublishを自前で定義することになります。</p>
<h2 id="PublishとSubscribeで制御する">PublishとSubscribeで制御する</h2><p>初めにautopublishを外します。</p>
<pre><code>meteor <span class="keyword">remove</span> autopublish
</code></pre><p>で削除されます。この状態でアプリの動作を確認すると、今まで見えていたデータが見えなくなっているはずです。</p>
<p>まず、autopublishと同等の状態に復元します。publishはsample-app.jsの<code>Tasks = new Mongo.Collection(&quot;tasks&quot;);</code>の直後に次のコードを追加してください。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Meteor.isServer) &#123;</span><br><span class="line">  Meteor.publish(<span class="string">"tasks"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Tasks.find();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>これは”tasks”と言う名前でTasksコレクションのすべてを送信するものです。次にこれを受け取るsubscribeをsample-app.jsの<code>if (Meteor.isClient) {}</code>のブロック内の先頭に追加してください。</p>
<pre><code>Meteor.subscribe<span class="params">(<span class="string">"tasks"</span>)</span>;
</code></pre><p>これで”tasks”でpublishされたコレクションを受け取ります。この2つの修正でautopublishを外す前の状態と同等になったはずですので、動作を確認しましょう。</p>
<p>修正したコードは<a href="https://github.com/meteor/simple-todos/blob/b292ba8028b19999a63e84d48fb2ca15d1e30110/simple-todos.js" target="_blank" rel="external">こちら</a>と同じ(コメント除く)になっているはずです。</p>
<h2 id="プライベートタスクを実装する">プライベートタスクを実装する</h2><p>publishでデータのフィルタリングを制御する例として、プライベートタスクを実装します。プライベートタスクは、タスクの所有者のみが見ることのできるタスクで、privateプロパティで識別するようにします。</p>
<p>最初にプライベートタスクにするかどうかの切替ボタンを作ります。sample-app.htmlのtaskテンプレートのcheckboxの直後に次のコードを追加します。</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="expression">&#123;&#123;<span class="begin-block">#<span class="keyword">if</span> isOwner</span>&#125;&#125;</span><span class="xml"></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">"toggle-private"</span>&gt;</span></span><br><span class="line">    </span><span class="expression">&#123;&#123;<span class="begin-block">#<span class="keyword">if</span> private</span>&#125;&#125;</span><span class="xml"></span><br><span class="line">      Private</span><br><span class="line">    </span><span class="expression">&#123;&#123;<span class="variable"><span class="keyword">else</span></span>&#125;&#125;</span><span class="xml"></span><br><span class="line">      Public</span><br><span class="line">    </span><span class="expression">&#123;&#123;<span class="end-block">/<span class="keyword">if</span></span>&#125;&#125;</span><span class="xml"></span><br><span class="line">  <span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"></span><span class="expression">&#123;&#123;<span class="end-block">/<span class="keyword">if</span></span>&#125;&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
<p><code>isOwner</code>はこれから作るヘルパーです。トグルボタンでプライベートタスクと今まで通りのパブリックタスクを切り替えるようにしています。</p>
<p>プライベートタスクの場合は見ためも変えるようにしてみましょう。sample-app.htmlのtaskテンプレート内の1行目を次のように変更します。</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"</span></span></span><span class="expression">&#123;&#123;<span class="begin-block">#<span class="keyword">if</span> checked</span>&#125;&#125;</span><span class="xml"><span class="tag"><span class="value">checked</span></span></span><span class="expression">&#123;&#123;<span class="end-block">/<span class="keyword">if</span></span>&#125;&#125;</span><span class="xml"><span class="tag"><span class="value"> </span></span></span><span class="expression">&#123;&#123;<span class="begin-block">#<span class="keyword">if</span> private</span>&#125;&#125;</span><span class="xml"><span class="tag"><span class="value">private</span></span></span><span class="expression">&#123;&#123;<span class="end-block">/<span class="keyword">if</span></span>&#125;&#125;</span><span class="xml"><span class="tag"><span class="value">"</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>次に、sample-app.jsを修正します。まず、<code>isOwner</code>ヘルパーを<code>Template.task.events({})</code>のブロックの前に下記のように追加します。ブロックの外です。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">Template</span><span class="class">.task</span><span class="class">.helpers</span>(<span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">isOwner</span>:<span class="value"> function () &#123;</span><br><span class="line">    return this.owner === Meteor.<span class="function">userId</span>()</span></span>;</span><br><span class="line">  &#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>さらに、トグルボタンのイベント処理を<code>Template.task.events.({})</code>のブロック内の最後に追加します(追加前の最後のアイテムにカンマ”,”をつけて区切ることを忘れずに)。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"click .toggle-private"</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  Meteor.call(<span class="string">"setPrivate"</span>, <span class="keyword">this</span>._id, ! <span class="keyword">this</span>.<span class="keyword">private</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>この<code>setPrivate</code>はMeteor.methods({})のブロック内の最後に追加します(追加前の最後のアイテムにカンマ”,”をつけて区切ることを忘れずに)。</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setPrivate: <span class="keyword">function</span> (taskId, setToPrivate) &#123;</span><br><span class="line">  var task = Tasks.findOne(taskId);</span><br><span class="line">  if (task.owner !== Meteor.userId()) &#123;</span><br><span class="line">    throw new Meteor.Error(<span class="string">"not-authorized"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  Tasks.update(taskId, &#123; <span class="variable">$set</span>: &#123; private: setToPrivate &#125; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>setPrivate</code>でデータを変更できるのはそのデータの所有者のみにしたいため、まずそれをチェックしてから<code>Tasks.update()</code>を呼び出しています。<code>findOne</code>はデータを一つだけ取得する<a href="http://docs.meteor.com/#/full/findone" target="_blank" rel="external">関数</a>です。</p>
<h3 id="privateプロパティでpublishを変更">privateプロパティでpublishを変更</h3><p>さて、privateプロパティができたので、プライベートタスクは他人からは見えないようにしましょう。そのためにはsample-app.jsを次のように修正します。</p>
<p>先ほど入力した</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Meteor.publish(<span class="string">"tasks"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Tasks.find();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>を、次のコードで置き換えます。</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Meteor.publish(<span class="string">"tasks"</span>, <span class="keyword">function</span> () &#123;</span><br><span class="line">  return Tasks.find(&#123;</span><br><span class="line">    <span class="variable">$or</span>: [</span><br><span class="line">      &#123; private: &#123;<span class="variable">$ne</span>: true&#125; &#125;,</span><br><span class="line">      &#123; owner: this.userId &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>MongoDBのクエリが多少複雑ですが、privateが設定されていないか、所有者が自分であるタスクをコレクションから抽出するようになっています。</p>
<h3 id="Meteor-methodsの定義の変更">Meteor.methodsの定義の変更</h3><p>プライベートタスクができたので、タスク完了の変更やタスクの削除についてもプライベートタスクについては所有者しか操作できないように制限しましょう。</p>
<p>sample-app.jsのMeteor.methodの<code>deleteTask</code>と<code>setChecked</code>を次のように修正してください。</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">deleteTask: <span class="function"><span class="keyword">function</span> <span class="params">(taskId)</span> &#123;</span></span><br><span class="line">  var task = Tasks.findOne<span class="params">(taskId)</span>;</span><br><span class="line">  <span class="keyword">if</span> <span class="params">(task.private &amp;&amp; task.owner !== Meteor.userId<span class="params">()</span>)</span> &#123;</span><br><span class="line">    throw new Meteor.Error<span class="params">(<span class="string">"not-authorized"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Tasks.remove<span class="params">(taskId)</span>;</span><br><span class="line">&#125;,</span><br><span class="line">setChecked: <span class="function"><span class="keyword">function</span> <span class="params">(taskId, setChecked)</span> &#123;</span></span><br><span class="line">  var task = Tasks.findOne<span class="params">(taskId)</span>;</span><br><span class="line">  <span class="keyword">if</span> <span class="params">(task.private &amp;&amp; task.owner !== Meteor.userId<span class="params">()</span>)</span> &#123;</span><br><span class="line">    throw new Meteor.Error<span class="params">(<span class="string">"not-authorized"</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Tasks.update<span class="params">(taskId, &#123; $set: &#123; checked: setChecked&#125; &#125;)</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>このコードではパブリックタスクは誰でも削除できるようになっています。パブリックタスクでも所有者のみが削除できるようにする修正も可能です。</p>
<h3 id="最終的なコード">最終的なコード</h3><p>すべての修正を終えたファイルは、<a href="https://github.com/meteor/simple-todos/blob/d1a2cc5eefa0b830f5f952cb6a94a496d7bb13aa/simple-todos.html" target="_blank" rel="external">このHTMLファイル</a>と<a href="https://github.com/meteor/simple-todos/blob/b5957208d50a064a4a22780c7ef76259691b2c7a/simple-todos.js" target="_blank" rel="external">このJavaScriptファイル</a>になっているはずです。コメントや空行の有無などの違いはあってもコードとしては同一になっているかを確認するとよいでしょう。</p>
<h2 id="動作を確認する">動作を確認する</h2><p>複数のユーザを作成して、それぞれプライベートタスクを作成し、互いに他人のプライベートタスクを見ることができないことを確認しましょう。</p>
<p>また仮にすべてのタスクをpublishするようにした場合でも、他人のプライベートタスクを完了したり削除したりできないことを確認しましょう。このとき、Optimistic UIにより一瞬変更が有効になったように見えて、すぐに戻されるという現象を確認できるかもしれません。</p>
<h2 id="まとめと今後の学習法">まとめと今後の学習法</h2><p>以上で、一連のチュートリアルをすべて終了しました。これでMeteorの基本的な仕組みを学習できました。</p>
<p>Meteorには他にも例題が用意されています。</p>
<pre><code>meteor <span class="built_in">create</span> <span class="comment">--example todos</span>
meteor <span class="built_in">create</span> <span class="comment">--example localmarket</span>
</code></pre><p>とすることでプロジェクトディレクトリが作成されますので、これらのコードを読んでみることも参考になるでしょう。</p>
<p>Meteorのマニュアルは<a href="http://docs.meteor.com/" target="_blank" rel="external">http://docs.meteor.com/</a>にあります。<a href="http://docs.meteor.com/#/basic/" target="_blank" rel="external">Basic Docs</a>は分量が少なめなので素直に上から読んでみるとよいかもしれません(英語ですが)。<a href="http://docs.meteor.com/#/full/" target="_blank" rel="external">Full API</a>は何か調べたいときに参照するのがよいのではないでしょうか。</p>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/first-data-filtering-in-meteor/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Meteorをブラウザ環境のみで試すMeteorPad]]></title>
      <link>http://meteor-fan.axlight.com/introducing-meteorpad/</link>
      <guid>http://meteor-fan.axlight.com/introducing-meteorpad/</guid>
      <pubDate>Fri, 14 Aug 2015 01:13:48 GMT</pubDate>
      <description>
      <![CDATA[<p>MeteorPadについて紹介します。過去の<a href="http://info.meteor.com/blog/meteorpad-meteor-code-playground" target="_blank" rel="external">Meteorの公式ブログ<]]>
      </description>
      <content:encoded><![CDATA[<p>MeteorPadについて紹介します。過去の<a href="http://info.meteor.com/blog/meteorpad-meteor-code-playground" target="_blank" rel="external">Meteorの公式ブログ</a>でも紹介されていました。</p>
<h2 id="MeteorPadとは">MeteorPadとは</h2><p>通常、Meteorアプリを開発する場合はローカルマシンに開発環境をインストールして、エディタでコードを書いて、ブラウザで動作を確認します。MeteorPadはこれをブラウザ環境で実行できるようにしたものです。</p>
<p>MeteorPadを使うとMeteorのインストールの手間が省けるため、とりあえずMeteorがどのなものか試してみるにはとても手軽でよいです。また、疑似ターミナルがあるため、ローカルマシンでの環境と雰囲気も近いです。そのため、MeteorPadで試した後にローカルマシン環境に移行することもスムーズでしょう。</p>
<h2 id="MeteorPadの使い方">MeteorPadの使い方</h2><p>百聞は一見にしかず。実際に使ってみるのが早いです。</p>
<p><a href="http://meteorpad.com/" target="_blank" rel="external">http://meteorpad.com/</a></p>
<p><img src="https://farm6.staticflickr.com/5676/20367079670_d6e12dc436_k.jpg" alt="スクリーンショット"></p>
<p>Leaderboardというアプリがデフォルトで入っています。右のエリアで実際にアプリが動いています。別ウインドウで動作させることも可能です。</p>
<p>左のエリアでMeteorのバージョンを指定したり、パッケージを追加したりできます。過去のMeteorのバージョンに切り替えて動作確認もできます。</p>
<p>中央のエリアがエディタです。スクロールするとすべてのファイルが見えます。規模が大きくなるとつらそうですが。</p>
<p>下部のエリアが疑似ターミナルです。入力はできません。</p>
<h3 id="Meteorチュートリアルの実行">Meteorチュートリアルの実行</h3><p>Leaderboardを<a href="https://www.meteor.com/tutorials/blaze" target="_blank" rel="external">Meteorチュートリアル</a>のsimple-todosに置き換えて実行することができます。インポート機能がまだないようなので、コピー&amp;ペーストでコードを置き換えてください。パッケージの追加削除もできるので、チュートリアルの各ステップをちゃんと再現できるはずです。</p>
<h3 id="制限事項">制限事項</h3><p>MeteorPadのアプリ(pad)には有効期限があるようですので、永続的には使えません。</p>
<h2 id="作者の発表動画">作者の発表動画</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/zF2iBgS9qJU" frameborder="0" allowfullscreen></iframe>

<h2 id="感想">感想</h2><p>Meteorをインストールしないで試してみたいという人はいそうなので、初期ユーザに需要があるのではないでしょうか。さらに機能が増えて、インポート、アップロード、ファイルブラウザ、デプロイなどができるようになれば、ブラウザ環境だけで実用的な開発もできそうです。</p>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/introducing-meteorpad/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Meteorで初めてのパーミッション制御]]></title>
      <link>http://meteor-fan.axlight.com/first-permission-control-in-meteor/</link>
      <guid>http://meteor-fan.axlight.com/first-permission-control-in-meteor/</guid>
      <pubDate>Thu, 13 Aug 2015 12:12:28 GMT</pubDate>
      <description>
      <![CDATA[<p>本記事は<a href="https://www.meteor.com/tutorials/blaze/security-with-methods" target="_blank" rel="external">公式チュートリアル10</a>の内容に沿って説明するものです。]]>
      </description>
      <content:encoded><![CDATA[<p>本記事は<a href="https://www.meteor.com/tutorials/blaze/security-with-methods" target="_blank" rel="external">公式チュートリアル10</a>の内容に沿って説明するものです。</p>
<h2 id="チュートリアルの目次">チュートリアルの目次</h2><ol>
<li><a href="http://meteor-fan.axlight.com/creating-first-meteor-app/">初めてのMeteorアプリ作成</a></li>
<li><a href="http://meteor-fan.axlight.com/first-spacebars-template/">初めてのMeteor Spacebarsでテンプレート</a></li>
<li><a href="http://meteor-fan.axlight.com/first-meteor-mongo/">初めてのMeteor Mongoコレクション</a></li>
<li><a href="http://meteor-fan.axlight.com/first-meteor-forms/">初めてのフォームとイベント処理</a></li>
<li><a href="http://meteor-fan.axlight.com/first-collection-update-in-meteor/">Meteorで初めてのコレクション更新と削除</a></li>
<li><a href="http://meteor-fan.axlight.com/deploying-first-meteor-app/">初めてのMeteorアプリのデプロイ</a></li>
<li>Meteorで初めてのモバイルアプリ (スキップ)</li>
<li><a href="http://meteor-fan.axlight.com/first-session-variables-in-meteor/">Meteorで初めてのセッション変数</a></li>
<li><a href="http://meteor-fan.axlight.com/first-user-accounts-in-meteor/">Meteorで初めてのユーザアカウント</a></li>
<li>Meteorで初めてのパーミッション制御 (←今ここ)</li>
</ol>
<h2 id="これまでのmongoデータベースのパーミッション">これまでのmongoデータベースのパーミッション</h2><p>上記の一連のチュートリアルにおいては、これまでのところmongoに誰でもアクセスできるようになっていました。完全にオープンです。ユーザ認証機能を加えたことでもこれは変わりません。例えば、ログイン前はタスクを登録できないようにフォームを非表示にしましたが、実際にはJavaScriptのコードを直接実行すればログインしなくてもタスクが登録できてしまいます。</p>
<p>ただし、これは一概に悪いことではありません。そのようなセキュリティモデルであることを正しく理解して使う分には価値があります。例えば、開発途中のアプリで外部に公開しないもの、一人だけで使うアプリ、寿命が極端に短いアプリ、何かしらの方法で別のセキュリティモデルを提供しているアプリなど、利用シーンは様々です。</p>
<h2 id="mongoデータベースのパーミッションを制御する">mongoデータベースのパーミッションを制御する</h2><p>この完全にオープンなパーミッションは、実はデフォルトで追加されている<code>insecure</code>というパッケージによって実現されています。よってこのパッケージを削除すると、パーミッションはオープンではなくなり自分で制御することになります。</p>
<p>さて、パッケージを削除してみましょう。meteorを起動している状態で、</p>
<pre><code>meteor <span class="keyword">remove</span> insecure
</code></pre><p>を実行してください。パッケージが削除されると、今までできていたタスクの追加などができなくなっているはずです。この時点で動作を確認しましょう。</p>
<h2 id="Meteor-methodsを定義する">Meteor.methodsを定義する</h2><p>クライアント側で直接データを修正することができなくなったので、データを修正するAPI(methods)を用意してクライアントから呼び出せるようにします。その際にmethodsの内部でログインしていかなどの権限をチェックすればよいことになります。</p>
<p>少しややこしいのですが、このmethodsはサーバ側とクライアント側両方に動作するように定義することができます。そうすることで、クライアントではサーバにリクエストを送ると同時に定義されたmethodを実行します。そうすることでサーバの処理の結果を待たずに処理を完了してUIに反映することができます。これをOptimistic UIと呼びます。後ほどサーバからの処理結果が反映されたら再度それをUIに反映します。このとき、結果が同じであればUI上は変化がないため、ユーザからはとても反応のよいUIに見えることになります。</p>
<p>さて、methodsを定義しましょう。sample-app.jsの最後に下記のコードを追加してください。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">Meteor</span><span class="class">.methods</span>(<span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">addTask</span>:<span class="value"> function (text) &#123;</span><br><span class="line">    if (! Meteor.<span class="function">userId</span>()) &#123;</span><br><span class="line">      throw new Meteor.<span class="function">Error</span>(<span class="string">"not-authorized"</span>)</span></span>;</span><br><span class="line">    &#125;</span></span><br><span class="line">    <span class="tag">Tasks</span><span class="class">.insert</span>(<span class="rules">&#123;</span><br><span class="line">      <span class="rule"><span class="attribute">text</span>:<span class="value"> text,</span><br><span class="line">      createdAt: new <span class="function">Date</span>(),</span><br><span class="line">      owner: Meteor.<span class="function">userId</span>(),</span><br><span class="line">      username: Meteor.<span class="function">user</span>().username</span><br><span class="line">    &#125;)</span></span>;</span><br><span class="line">  &#125;</span>,</span><br><span class="line">  <span class="rule"><span class="attribute">deleteTask</span>:<span class="value"> function (taskId) &#123;</span><br><span class="line">    Tasks.<span class="function">remove</span>(taskId)</span></span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="rule"><span class="attribute">setChecked</span>:<span class="value"> function (taskId, setChecked) &#123;</span><br><span class="line">    Tasks.<span class="function">update</span>(taskId, &#123; $set: &#123; checked: setChecked&#125; &#125;)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>addTask</code>の初めにログインのチェックが加わりました。これにより、ログインしていないユーザからのアクセスを確実に拒否することができます。</p>
<h2 id="methodsを呼び出す">methodsを呼び出す</h2><p>次に、これらのmethodsを呼び出すようにクライアント側のコードを修正します。</p>
<p>sample-app.jsのisClientブロック内の<code>Task.insert()</code>文は、</p>
<pre><code>Meteor.<span class="keyword">call</span>(<span class="string">"addTask"</span>, <span class="keyword">text</span>);
</code></pre><p>になります。同じく、<code>Task.update()</code>文は、</p>
<pre><code>Meteor.call(<span class="string">"setChecked"</span>, <span class="keyword">this</span>._id, ! <span class="keyword">this</span>.<span class="keyword">checked</span>);
</code></pre><p>になります。同じく、<code>Task.remove()</code>文は、</p>
<pre><code>Meteor.<span class="keyword">call</span>(<span class="string">"deleteTask"</span>, <span class="keyword">this</span>._id);
</code></pre><p>になります。</p>
<p>すべての修正が完了したファイルは、<a href="https://github.com/meteor/simple-todos/blob/40f20dec61f94269f434f8e6600f52e48dab9c59/simple-todos.js" target="_blank" rel="external">こちらのJavaScriptファイル</a>のようになっているはずですので、確認してください。</p>
<h2 id="動作確認">動作確認</h2><p>今回の修正でこれまでと同じように正しく動くか確認しましょう。タスクの追加、タスクの変更・削除ができるはずです。</p>
<p>ログインしていない場合にタスクが追加できないことを確認するには、一旦、フォームをログインしていなくても表示するように変更を戻してから、試してみるとよいでしょう。具体的には、</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="expression">&#123;&#123;<span class="begin-block">#<span class="keyword">if</span> currentUser</span>&#125;&#125;</span><span class="xml"></span><br><span class="line">  ...</span><br><span class="line"></span><span class="expression">&#123;&#123;<span class="end-block">/<span class="keyword">if</span></span>&#125;&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
<p>のifの開始と終了のそれぞれ1行を一時的に削除することで戻すことができます。</p>
<h2 id="まとめと次のステップ">まとめと次のステップ</h2><p>今回はパーミッションを完全オープンではなく独自に制御する方法を学びました。ここはMeteorの複雑な部分でもあり、すぐに全体を見通すことは難しいかもしれません。しかし、重要な部分でもあるため、時間をかけて理解する必要があるでしょう。</p>
<p>次回は最後のデータの読み込み権限に関する改善について学びます。</p>
<h2 id="おまけ">おまけ</h2><p>実は、Meteor.methods以外にもパーミッションを制御する方法があります。collection.allowとcollection.denyです。これらは、ある利用シーンにおいては、比較的手軽に制御することができます。しかし、現在(2015/8/13)の公式チュートリアルでは言及されていないので割愛しました。詳しくは、<a href="http://docs.meteor.com/#/full/allow" target="_blank" rel="external">ドキュメント</a>をご覧ください。</p>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/first-permission-control-in-meteor/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Meteorのaccounts-facebookの設定をリセットする方法]]></title>
      <link>http://meteor-fan.axlight.com/reset-accounts-facebook-config-in-meteor/</link>
      <guid>http://meteor-fan.axlight.com/reset-accounts-facebook-config-in-meteor/</guid>
      <pubDate>Thu, 13 Aug 2015 09:41:56 GMT</pubDate>
      <description>
      <![CDATA[<p>accounts-facebookというのはMeteorでFacebook認証を行うためのパッケージです。</p>
<h2 id="accounts-facebookの簡単な使い方説明">accounts-facebookの簡単な使い方説明</h2><pre><code><span class="label">meteor</span> <span class="keyword">add </span>accounts-ui accounts-facebook
</code></pre><p>でアプリにパッケージを導入し、HTMLで<br>]]>
      
      </description>
      <content:encoded><![CDATA[<p>accounts-facebookというのはMeteorでFacebook認証を行うためのパッケージです。</p>
<h2 id="accounts-facebookの簡単な使い方説明">accounts-facebookの簡単な使い方説明</h2><pre><code><span class="label">meteor</span> <span class="keyword">add </span>accounts-ui accounts-facebook
</code></pre><p>でアプリにパッケージを導入し、HTMLで<br><a id="more"></a></p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">&#123;<span class="collection">&#123;&gt; loginButtons&#125;</span>&#125;</span></span><br></pre></td></tr></table></figure>
<p>とすると、ログインボタンを設置できます。<br>設置した直後は「未設定」の状態になっており、</p>
<p><img src="https://farm6.staticflickr.com/5802/20509477696_4331ea4c60.jpg" alt="ボタン1"></p>
<p>のようなボタンになっています。(このスクリーンショットはbootstrap cssを適用したものなので通常のものとLook&amp;Feelが異なりますが機能は同じです。</p>
<p>この”Configure Facebook”という赤いボタンを押すと、</p>
<p><img src="https://farm6.staticflickr.com/5622/20526823262_00580e88e7_b.jpg" alt="ダイアログ"></p>
<p>のようなダイアログ画面が出ます。これを設定するとログインボタンは、</p>
<p><img src="https://farm6.staticflickr.com/5830/20535716395_16257d7e88.jpg" alt="ボタン2"></p>
<p>のような青いボタンになり、ログインができるようになります。</p>
<h2 id="一度設定したボタンを元に戻すには?">一度設定したボタンを元に戻すには?</h2><p>上記の設定は一度行うとUI上からは当然元に戻せません。しかし、開発途中の段階では再設定したくなる場合があります。</p>
<p>そこで設定をリセットする、すなわち、青いボタンを赤いボタンに戻す方法を説明します。</p>
<p>情報源は<a href="http://stackoverflow.com/questions/17140483/how-do-i-reconfigure-meteors-accounts-facebook-or-where-is-meteors-facebook-c" target="_blank" rel="external">こちらのstackoverflowの記事</a>です。</p>
<p>いくつか方法があるようですが、一つ手軽な方法を紹介します。まず、下記のコマンドでmongo shellを開きます。</p>
<pre><code><span class="title">meteor</span> mongo
</code></pre><p>次に、下記のコマンドで設定データを削除します。</p>
<pre><code><span class="tag">db</span><span class="class">.meteor_accounts_loginServiceConfiguration</span><span class="class">.remove</span>({<span class="attribute">service</span>:<span class="string">'facebook'</span>})
</code></pre><p>これでブラウザをリロードするとボタンが設定前の状態(赤いボタン)に戻るはずです。</p>
<h3 id="最後に">最後に</h3><p>今回はaccounts-facebookに関する説明でしたが、基本的には他のaccountsのパッケージでも同様に設定がリセットできると思われます。いずれにしても、mongo shellでデータを削除する前に、</p>
<pre><code>db<span class="class">.meteor_accounts_loginServiceConfiguration</span><span class="class">.find</span>()
</code></pre><p>で消すデータを事前に確認しておくことが必要でしょう。</p>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/reset-accounts-facebook-config-in-meteor/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Meteorで初めてのユーザアカウント]]></title>
      <link>http://meteor-fan.axlight.com/first-user-accounts-in-meteor/</link>
      <guid>http://meteor-fan.axlight.com/first-user-accounts-in-meteor/</guid>
      <pubDate>Thu, 13 Aug 2015 01:00:51 GMT</pubDate>
      <description>
      <![CDATA[<p>本記事は<a href="https://www.meteor.com/tutorials/blaze/adding-user-accounts" target="_blank" rel="external">公式チュートリアル9</a>の内容に沿って説明するものです。</]]>
      </description>
      <content:encoded><![CDATA[<p>本記事は<a href="https://www.meteor.com/tutorials/blaze/adding-user-accounts" target="_blank" rel="external">公式チュートリアル9</a>の内容に沿って説明するものです。</p>
<h2 id="チュートリアルの目次">チュートリアルの目次</h2><ol>
<li><a href="http://meteor-fan.axlight.com/creating-first-meteor-app/">初めてのMeteorアプリ作成</a></li>
<li><a href="http://meteor-fan.axlight.com/first-spacebars-template/">初めてのMeteor Spacebarsでテンプレート</a></li>
<li><a href="http://meteor-fan.axlight.com/first-meteor-mongo/">初めてのMeteor Mongoコレクション</a></li>
<li><a href="http://meteor-fan.axlight.com/first-meteor-forms/">初めてのフォームとイベント処理</a></li>
<li><a href="http://meteor-fan.axlight.com/first-collection-update-in-meteor/">Meteorで初めてのコレクション更新と削除</a></li>
<li><a href="http://meteor-fan.axlight.com/deploying-first-meteor-app/">初めてのMeteorアプリのデプロイ</a></li>
<li>Meteorで初めてのモバイルアプリ (スキップ)</li>
<li><a href="http://meteor-fan.axlight.com/first-session-variables-in-meteor/">Meteorで初めてのセッション変数</a></li>
<li>Meteorで初めてのユーザアカウント (←今ここ)</li>
</ol>
<h2 id="Meteorに標準で用意されているユーザアカウント機能">Meteorに標準で用意されているユーザアカウント機能</h2><p>Meteorには標準ですぐに使えるアカウント機能が組み込まれています。現状では、下記のパッケージが用意されています。</p>
<ul>
<li>accounts-password</li>
<li>accounts-facebook</li>
<li>accounts-github</li>
<li>accounts-google</li>
<li>accounts-meetup</li>
<li>accounts-twitter</li>
<li>accounts-weibo</li>
</ul>
<p>これらのパッケージを使うと、例えばFacebookの認証に対応したWebアプリを簡単に作ることができます。今回のチュートリアルでは外部システムと連携不要なaccounts-passwordを使います。accounts-passwordはhttpで用いるとパスワードが平文で流れるため、production環境で用いるにはhttpsが前提になるでしょう。テスト環境で使う分にはとても手軽です。</p>
<h2 id="accounts-passwordパッケージを追加する">accounts-passwordパッケージを追加する</h2><p>まずパッケージを追加しましょう。meteorは起動したままで大丈夫です。</p>
<pre><code><span class="label">meteor</span> <span class="keyword">add </span>accounts-ui accounts-password
</code></pre><p>を実行してください。これで関係する依存パッケージも自動で追加されます。</p>
<h2 id="ログインボタンを配置する">ログインボタンを配置する</h2><p>次にログインボタンを表示するためのコードを追加します。sample-app.jsの<code>&lt;form class=&quot;new-task&quot;&gt;</code>のすぐ上に下記のコードを追加してください。</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">&#123;<span class="collection">&#123;&gt; loginButtons&#125;</span>&#125;</span></span><br></pre></td></tr></table></figure>
<p>これだけでログインボタン(リンク)が表示されるはずです。ブラウザで確認しましょう。</p>
<p>デフォルトではログインのアカウント作成時に電子メールアドレスとパスワードの入力を求めます。テスト時は電子メールアドレスでなくても問題ないので、次のコードをsample-app.jsの<code>if (Meteor.isClient) {}</code>ブロック内の最後に追加してください。</p>
<pre><code><span class="tag">Accounts</span><span class="class">.ui</span><span class="class">.config</span>(<span class="rules">{
  <span class="rule"><span class="attribute">passwordSignupFields</span>:<span class="value"> <span class="string">"USERNAME_ONLY"</span>
})</span></span>;</span>
</code></pre><p>これにより電子メールアドレスではなく単なるユーザ名を指定するようになります。</p>
<h2 id="ログイン動作の確認">ログイン動作の確認</h2><p>ログインボタンを押すとログインダイアログが表示され、そこにアカウント作成のリンクもあります。まずは、新規にアカウントを作成しましょう。その後、ログインやログアウトの機能がどのように動くかを確認しましょう。</p>
<h2 id="ログインによる機能拡張">ログインによる機能拡張</h2><p>さて、ログイン自体はできましたが、このままでは特に機能に変化はありません。そこで、ログインによって次の2つの機能を実現します。</p>
<ol>
<li>ログインしている場合のみ新規タスク追加のフォームを表示する</li>
<li>タスクに作成者を設定してログインユーザを作成者にする</li>
</ol>
<p>1つ目の機能のためには、sample-app.jsの<code>&lt;form class=&quot;new-task&quot;&gt;</code>のブロック全体を次のようにifブロックで囲みます。</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="expression">&#123;&#123;<span class="begin-block">#<span class="keyword">if</span> currentUser</span>&#125;&#125;</span><span class="xml"></span><br><span class="line">  <span class="tag">&lt;<span class="title">form</span> <span class="attribute">class</span>=<span class="value">"new-task"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"text"</span> <span class="attribute">placeholder</span>=<span class="value">"Type to add new tasks"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"></span><span class="expression">&#123;&#123;<span class="end-block">/<span class="keyword">if</span></span>&#125;&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
<p><code>currentUser</code>はログインしているユーザの情報を格納しているオブジェクトで、ログインしていない状態では空(null)になるのでifブロックで表示の制御ができます。</p>
<p>2つ目の機能のためには、DBに追加するドキュメント(データ)にプロパティを追加します。具体的には、sample-app.jsの<code>Tasks.insert()</code>文を次のように変更します。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">Tasks</span><span class="class">.insert</span>(<span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">text</span>:<span class="value"> text,</span><br><span class="line">  createdAt: new <span class="function">Date</span>(),</span><br><span class="line">  owner: Meteor.<span class="function">userId</span>(),</span><br><span class="line">  username: Meteor.<span class="function">user</span>().username</span><br><span class="line">&#125;)</span></span>;</span></span><br></pre></td></tr></table></figure>
<p><code>Meteor.userId()</code>はログインユーザのIDを返します。<code>Meteor.user()</code>はログインユーザのオブジェクトを返すもので、HTMLで用いるhelperの<code>currentUser</code>と同等の情報が格納されます。<code>username</code>プロパティでユーザ名を取り出すことができます。<code>_id</code>プロパティがユーザIDであり、<code>Meteor.user()._id</code>と<code>Meteor.userId()</code>は基本的に同じ意味になります。</p>
<p>ところで、このownerとusernameを両方指定する手法は非正規化と言ってJOINのないMongoDBではしばしば使われるようです。そもそもユーザIDが分かればユーザ名は一意に決まるはずなので冗長なのですが、ユーザ名も合わせて格納することで高速化できます。</p>
<p>最後に、DBに追加したユーザ名を表示するようにします。sample-app.htmlの</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"text"</span>&gt;</span></span><span class="expression">&#123;&#123;<span class="variable">text</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>を</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"text"</span>&gt;</span><span class="tag">&lt;<span class="title">strong</span>&gt;</span></span><span class="expression">&#123;&#123;<span class="variable">username</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">strong</span>&gt;</span> - </span><span class="expression">&#123;&#123;<span class="variable">text</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>に変更しましょう。</p>
<p>今回の以上の修正で変更した後のファイルは、<a href="https://github.com/meteor/simple-todos/blob/cd80f2966275060c64e4418c44cf13669386ce4d/simple-todos.js" target="_blank" rel="external">こちらのJavaScriptファイル</a>と<a href="https://github.com/meteor/simple-todos/blob/d7ad84ff5ae149e78621c85a1d2fd32959439f29/simple-todos.html" target="_blank" rel="external">こちらのHTMLファイル</a>と同じようになっているはずなので必要応じて確認してください。</p>
<h2 id="動作確認">動作確認</h2><p>実際に想定通りに動くか確認しましょう。可能であれば複数のアカウントを作成してそれぞれでタスクを追加してみるとよいです。以前に追加したタスクにはusernameプロパティはないのでユーザ名は表示されないことに注意しましょう。</p>
<h2 id="まとめと次のステップ">まとめと次のステップ</h2><p>今回はパスワード認証のパッケージを用いましたが、OAuthなどの外の認証機構を用いることもできます。これらを使い込なすことでよりアプリ開発が楽になるでしょう。次回はデータの書き込み権限に関する改善について学びます。</p>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/first-user-accounts-in-meteor/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Meteorのファイル・ディレクトリ(フォルダ)構成について]]></title>
      <link>http://meteor-fan.axlight.com/meteor-file-structure/</link>
      <guid>http://meteor-fan.axlight.com/meteor-file-structure/</guid>
      <pubDate>Wed, 12 Aug 2015 01:55:40 GMT</pubDate>
      <description>
      <![CDATA[<p>本記事では、Meteorのファイル構成について説明します。Meteorのファイル構成は複雑ではありませんが色々決まりがあるため理解する必要があります。</p>
<p>Meteorの初めのチュートリアルでは、HTML, JavaScript, CSSでそれぞれ1ファイルで合計]]>
      </description>
      <content:encoded><![CDATA[<p>本記事では、Meteorのファイル構成について説明します。Meteorのファイル構成は複雑ではありませんが色々決まりがあるため理解する必要があります。</p>
<p>Meteorの初めのチュートリアルでは、HTML, JavaScript, CSSでそれぞれ1ファイルで合計3ファイルだけを使います。練習としてはこれで十分ですが、分割すると便利なことがあります。</p>
<p><a href="http://docs.meteor.com/#/full/structuringyourapp" target="_blank" rel="external">公式マニュアル</a>に詳しい説明がありますので、合わせて参照してください。</p>
<h2 id="まず原則として">まず原則として</h2><p>プロジェクトディレクトリに置かれたファイルはmeteorが認識して自動で読み込まれます。ファイルは拡張子やディレクトリ名で分類されます。複数のファイルに分割されている場合でも同じ種類のファイルはMeteorが自動で結合します。</p>
<h2 id="特殊ディレクトリ">特殊ディレクトリ</h2><p>次に特殊ディレクトリについて説明します。</p>
<h3 id="client">client</h3><p><code>client</code>という名前のディレクトリはクライアント側のファイル専用になり、サーバ側では読み込まれなくなります。JavaScriptファイルの場合は、普通の場所に置いたJavaScriptファイルの中で<code>if (Meteor.isClient) {}</code>のブロック内に記述するのと同じになります。JavaScriptファイルとCSSファイルは結合されます。production環境ではさらにminifyされます。</p>
<p>HTMLファイルの結合方式は少し特殊で、すべてのHTMLファイルから<code>&lt;head&gt;</code>と<code>&lt;body&gt;</code>が抜き出されて結合されたものが初回のページロードで送られます。</p>
<h3 id="server">server</h3><p><code>server</code>という名前のディレクトリはサーバ側のファイル専用になり、クライアント側では読み込まれなくなります。JavaScriptファイルの場合は、普通の場所に置いたJavaScriptファイルの中で<code>if (Meteor.isServer) {}</code>のブロック内に記述するのと同じようになりますが、<code>server</code>内のファイルはクライアント側には一切送られないことが異なります。認証機能などクライアント側から見られたくないファイルはここに置きます。</p>
<p><code>client</code>, <code>public</code>, <code>private</code>以外のディレクトリのJavaScriptファイルは一つにまとめられてサーバ(Node.js)に読み込まれます。</p>
<h3 id="public">public</h3><p><code>public</code>という名前のトップディレクトリはそのままの形でクライアント側に渡されます。ファイルの結合は行なわれません。画像ファイルなどはここに置きます。</p>
<p>HTMLの中で<code>&lt;img src=&quot;/bg.png&quot; /&gt;</code>のように参照すると、<code>public/bg.png</code>のファイルを指します。</p>
<h3 id="private">private</h3><p><code>private</code>という名前のトップディレクトリはサーバ側のJavaScriptコードや<a href="http://docs.meteor.com/#/full/assets" target="_blank" rel="external">Assets</a>からのみアクセスできます。ここには外部から読み込まれたくないデータファイルなどを置きます。</p>
<h3 id="client/compatibility">client/compatibility</h3><p><code>client</code>の中の<code>compatibility</code>ディレクトリには必要に応じて旧来のJavaScriptライブラリファイルを入れます。これらのJavaScriptファイルは通常の読み込みとは異なり、新しい変数スコープに閉じられません。var宣言された変数をグローバルスコープに出したい場合に使います。これらのファイルは外のclientのJavaScriptファイルより先に読み込まれます。</p>
<h3 id="tests">tests</h3><p><code>tests</code>という名前のディレクトリはテスト用のコードを置くディレクトリです。ここのファイルはどこからも読み込まれません。</p>
<h2 id="特殊ディレクトリ以外に置かれたファイル">特殊ディレクトリ以外に置かれたファイル</h2><p>上記の特殊ディレクトリ以外に置かれたJavaScriptファイルはサーバ側でもクライアント側でも読み込まれます。その上で、<code>Meteor.isServer</code>, <code>Meteor.isClient</code>によって、実行を制御することができます。</p>
<p>上記の特殊ディレクトリ以外に置かれたCSS, HTMLファイルはクライアント側のみで読み込まれます。</p>
<h2 id="ファイルの読み込み順序">ファイルの読み込み順序</h2><p>まず原則としてはファイルの読み込み順に依存せずコードを構成することがよいでしょう。これには<code>Meteor.startup()</code>を利用したり、パッケージ化を行って依存性を明確にする方法があります。</p>
<p>しかし、どうしても読み込み順を制御したい場合には、下記のルールを参考にしましょう。</p>
<ol>
<li>HTMLファイルは何よりも先に読み込まれます</li>
<li><code>main.</code>で始まるファイルは最後に読み込まれます</li>
<li><code>lib</code>ディレクトリのファイルが次に読み込まれます</li>
<li>深い階層にあるファイルが次に読み込まれます</li>
<li>上のルールで同じ順になったファイルはフルパスのアルファベット順に読み込まれます</li>
</ol>
<p>このルールに従うと例えば正しい読み込み順に並べられたファイルは下記のようになります。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">nav</span><span class="class">.html</span></span><br><span class="line">main<span class="class">.html</span></span><br><span class="line">client/lib/methods<span class="class">.js</span></span><br><span class="line">client/lib/styles<span class="class">.js</span></span><br><span class="line">lib/feature/styles<span class="class">.js</span></span><br><span class="line">lib/collections<span class="class">.js</span></span><br><span class="line">client/feature-y<span class="class">.js</span></span><br><span class="line">feature-x<span class="class">.js</span></span><br><span class="line">client/main.js</span><br></pre></td></tr></table></figure>
<h2 id="まとめ">まとめ</h2><p>Meteorではファイルは比較的自由に分割して配置することができます。自動で読み込んで結合してくれるので手軽です。また、特殊ディレクトリについても少し覚えれば分かりやすいものでしょう。</p>
<p>一方、ファイルの読み込み順についてはルールがあるものの複雑な構成にすると分かりにくくなる可能性があります。できればおすすめされているように読み込み順に依存しないように構成できるとよいのではないでしょうか。パッケージ化は、コードの分離や再利用性を考えるとよい選択肢であると思われます。</p>
<p>ファイルの分割は単なる整理上の話だけではなく、ホットコードプッシュにも影響するようです。例えば、クライアント側のJavaScriptファイルのみを編集した場合は、クライアント側のみが更新され、サーバ側には影響がないため、共通JavaScriptファイルで<code>Meteor.isClient</code>で分けるより高速な場合があるようです。</p>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/meteor-file-structure/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Meteorで初めてのセッション変数]]></title>
      <link>http://meteor-fan.axlight.com/first-session-variables-in-meteor/</link>
      <guid>http://meteor-fan.axlight.com/first-session-variables-in-meteor/</guid>
      <pubDate>Tue, 11 Aug 2015 06:23:13 GMT</pubDate>
      <description>
      <![CDATA[<p>本記事は<a href="https://www.meteor.com/tutorials/blaze/temporary-ui-state" target="_blank" rel="external">公式チュートリアル8</a>の内容に沿って説明するものです。</p>]]>
      </description>
      <content:encoded><![CDATA[<p>本記事は<a href="https://www.meteor.com/tutorials/blaze/temporary-ui-state" target="_blank" rel="external">公式チュートリアル8</a>の内容に沿って説明するものです。</p>
<h2 id="チュートリアルの目次">チュートリアルの目次</h2><ol>
<li><a href="http://meteor-fan.axlight.com/creating-first-meteor-app/">初めてのMeteorアプリ作成</a></li>
<li><a href="http://meteor-fan.axlight.com/first-spacebars-template/">初めてのMeteor Spacebarsでテンプレート</a></li>
<li><a href="http://meteor-fan.axlight.com/first-meteor-mongo/">初めてのMeteor Mongoコレクション</a></li>
<li><a href="http://meteor-fan.axlight.com/first-meteor-forms/">初めてのフォームとイベント処理</a></li>
<li><a href="http://meteor-fan.axlight.com/first-collection-update-in-meteor/">Meteorで初めてのコレクション更新と削除</a></li>
<li><a href="http://meteor-fan.axlight.com/deploying-first-meteor-app/">初めてのMeteorアプリのデプロイ</a></li>
<li>Meteorで初めてのモバイルアプリ (スキップ)</li>
<li>Meteorで初めてのセッション変数 (←今ここ)</li>
</ol>
<p>チュートリアルも後半に入りました。ここからは少し実際的な機能に入ります。</p>
<h2 id="セッション変数とは">セッション変数とは</h2><p>セッション変数はクライアント側のみで使う変数です。通常のJavaScript変数と似ていますが、ホットコードプッシュでアプリが更新されても変数の中身が変わらなかったり、リアクティブ性を備えていたりと使い勝手がよいです。</p>
<h2 id="完了したタスクを非表示にする機能を追加する">完了したタスクを非表示にする機能を追加する</h2><p><a href="http://meteor-fan.axlight.com/first-collection-update-in-meteor/">以前のチュートリアル</a>で実装した「完了」タスクを表示上隠すチェックボックスを追加しましょう。この表示はクライアント毎に異なる方がよいので、セッション変数を使います。</p>
<p>sample-app.htmlに次のコードを追加します。<code>&lt;h1&gt;</code>タグのすぐ下に追加しましょう。</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">label</span> <span class="attribute">class</span>=<span class="value">"hide-completed"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">checked</span>=<span class="value">"</span></span></span><span class="expression">&#123;&#123;<span class="variable">hideCompleted</span>&#125;&#125;</span><span class="xml"><span class="tag"><span class="value">"</span> /&gt;</span></span><br><span class="line">  Hide Completed Tasks</span><br><span class="line"><span class="tag">&lt;/<span class="title">label</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>変更後のファイルは<a href="https://github.com/meteor/simple-todos/blob/e62e4c1f8ca6f9808b6f3a78c39c4874dffdcbb4/simple-todos.html" target="_blank" rel="external">こちら</a>と同じになっているはずなので確認しましょう。</p>
<p>次にsample-app.jsを修正します。1つ目は、イベントハンドラの登録です。次のコードを<code>Template.body.events({})</code>に追加しましょう。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"change .hide-completed input"</span>: <span class="function"><span class="keyword">function</span> <span class="params">(event)</span> </span>&#123;</span><br><span class="line">  Session.<span class="keyword">set</span>(<span class="string">"hideCompleted"</span>, event.target.checked);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>これによりチェックボックスを変更する度にチェックボックスの値が<code>hideCompleted</code>というセッション変数に設定されます。</p>
<p>2つ目は、bodyのへルパー関数の追加です。<code>Template.body.helpers({})</code>に次のコードを追加しましょう。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hideCompleted: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Session.<span class="keyword">get</span>(<span class="string">"hideCompleted"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>これによりHTMLで<code>&#x7b;{hideCompleted}}</code>とするとセッション変数の<code>hideCompleted</code>の値がとれることになります。</p>
<p>3つ目は、bodyのヘルパー関数の<code>tasks</code>の修正です。次のコードで置き換えてください。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">tasks</span>: <span class="tag">function</span> () &#123;</span><br><span class="line">  <span class="tag">if</span> (Session.<span class="function">get</span>(<span class="string">"hideCompleted"</span>)) &#123;</span><br><span class="line">    <span class="tag">return</span> <span class="tag">Tasks</span><span class="class">.find</span>(&#123;<span class="tag">checked</span>: &#123;$<span class="tag">ne</span>: <span class="tag">true</span>&#125;&#125;, &#123;<span class="tag">sort</span>: &#123;<span class="attribute">createdAt</span>: -<span class="number">1</span>&#125;&#125;);</span><br><span class="line">  &#125; <span class="tag">else</span> &#123;</span><br><span class="line">    <span class="tag">return</span> <span class="tag">Tasks</span><span class="class">.find</span>(&#123;&#125;, &#123;<span class="tag">sort</span>: &#123;<span class="attribute">createdAt</span>: -<span class="number">1</span>&#125;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>これにより<code>hideCompleted</code>が設定されている(truthy)場合は、checkedがないものだけに絞り込まれます。そうでない場合は、今まで通りになります。</p>
<p>これら3つの修正を終えたsample-app.jsは、<a href="https://github.com/meteor/simple-todos/blob/3352071c6d1c414f94ee21038f28c45651d6216c/simple-todos.js" target="_blank" rel="external">こちら</a>と同じようになっているはずです。</p>
<h2 id="動作確認">動作確認</h2><p>“Hide Completed Tasks”のチェックボックスをクリックして完了タスクが非表示になることを確認しましょう。ブラウザのリロードをしたり、別のブラウザを用いたりして、互いに影響がないことも確認しましょう。</p>
<h2 id="未完了タスク数を表示する">未完了タスク数を表示する</h2><p>未完了タスクのクエリを使って数を表示するようにしてみましょう。</p>
<p>sample-app.htmlの<code>&lt;h1&gt;</code>タグを次のように変更します。</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">h1</span>&gt;</span>Todo List (</span><span class="expression">&#123;&#123;<span class="variable">incompleteCount</span>&#125;&#125;</span><span class="xml">)<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>変更後のファイルは<a href="https://github.com/meteor/simple-todos/blob/48c14895d510dd095da3e114a40152d9291cbb83/simple-todos.html" target="_blank" rel="external">こちら</a>です。</p>
<p>これを表示するためのヘルパーをsample-app.jsの<code>Template.body.helpers({})</code>に追加します。</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">incompleteCount: <span class="keyword">function</span> () &#123;</span><br><span class="line">  return Tasks.find(&#123;checked: &#123;<span class="variable">$ne</span>: true&#125;&#125;).count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>変更後のファイルは<a href="https://github.com/meteor/simple-todos/blob/d7e04b692a361153918f4a88548dfdc1c0220367/simple-todos.js" target="_blank" rel="external">こちら</a>です。</p>
<p>これで未完了タスク数が表示されるはずです。</p>
<h2 id="次のステップ">次のステップ</h2><p>セッション変数についてはこれで終わりです。次はユーザ管理について学びます。</p>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/first-session-variables-in-meteor/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[MeteorでMongoDBのデバッグに使えるMongolパッケージ]]></title>
      <link>http://meteor-fan.axlight.com/mongol-for-debugging/</link>
      <guid>http://meteor-fan.axlight.com/mongol-for-debugging/</guid>
      <pubDate>Sun, 09 Aug 2015 02:07:53 GMT</pubDate>
      <description>
      <![CDATA[<p>Meteorでアプリの開発をするときにはどのようなデバッグ方法があるでしょうか。<code>meteor shell</code>や<code>meteor debug</code>はサーバサイドのツールです。クライアントサイドはどうでしょう。Meteorのチュートリアルを]]>
      </description>
      <content:encoded><![CDATA[<p>Meteorでアプリの開発をするときにはどのようなデバッグ方法があるでしょうか。<code>meteor shell</code>や<code>meteor debug</code>はサーバサイドのツールです。クライアントサイドはどうでしょう。Meteorのチュートリアルを見ているとブラウザのデベロッパーツールを使って、コンソールで操作することが一つの方法のようです。</p>
<p>今回は、クライアントサイドでのデバッグに使えるライブラリであるMongolを紹介します。</p>
<h2 id="Mongolとは">Mongolとは</h2><p><a href="https://github.com/msavin/Mongol/" target="_blank" rel="external">Mongol</a>は、Mongoのクライアントサイドのコレクション(データ)を見るためのビューアライブラリです。開発している動作中のアプリに追加して使います。できることは基本的にコンソール操作と変わらないのですが、UIがあるのでとても手軽に操作できます。</p>
<p>コレクションを閲覧するだけでなく修正したり、新しいドキュメントを追加したりすることもできます。また、insecureパッケージに依存しておらず、独自のmethodをサーバサイドに用意しているため、通常のコードに影響しません。</p>
<p>Mongolはデバッグ用のライブラリ(debugOnly)なので、デプロイ時には自動的に外されます。</p>
<p>インストール方法は開発中のアプリで、</p>
<pre><code><span class="label">meteor</span> <span class="keyword">add </span>msavin:mongol
</code></pre><p>とするだけです。</p>
<h2 id="試してみる">試してみる</h2><p><a href="http://mongol.meteor.com/" target="_blank" rel="external">http://mongol.meteor.com/</a>にデモがありますので試してみましょう。ビューアの表示・非表示の切り替えはCtrl-Mで行います。</p>
<p><img src="https://farm1.staticflickr.com/562/19803725534_aacc9b514e.jpg" alt="スクリーンショット1"></p>
<p>初めて表示する際は、コレクションのリストが表示されています。この状態でもドキュメント数が分かります。</p>
<p><img src="https://farm1.staticflickr.com/359/20432571781_18c9243bb5_b.jpg" alt="スクリーンショット2"></p>
<p>コレクション名をクリックすると中身を見ることができます。修正(Update)や削除(Remove)もできます。複数(Duplicate)してから修正することでできます。</p>
<p><img src="https://farm1.staticflickr.com/462/20400134536_7500a373e6_b.jpg" alt="スクリーンショット3"></p>
<p>コレクションが空の場合は新規作成になります。Subscriptionsの対象になっていれば、Insert後にすぐに反映されます。</p>
<h2 id="Meteor_Toysについて">Meteor Toysについて</h2><p>作者の方は<a href="http://meteor.toys/" target="_blank" rel="external">Meteor Toys</a>というサイトでMongol Proを提供しています。Pro版は有償ですが、データベースのリセットや復活できるゴミ箱機能などが入っているそうです。また、Meteor ToysにはMongol以外のライブラリも提供されています。</p>
<h2 id="感想">感想</h2><p>Meteorのデバッグ方法は従来のやり方とは異なるのではないかと思っていました。Mongolはコンソールでできることを簡単にしただけですが、DB周りの動作を確認するツールとしてはとても有用ではないかと思います。</p>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/mongol-for-debugging/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[初めてのMeteorアプリのデプロイ]]></title>
      <link>http://meteor-fan.axlight.com/deploying-first-meteor-app/</link>
      <guid>http://meteor-fan.axlight.com/deploying-first-meteor-app/</guid>
      <pubDate>Thu, 06 Aug 2015 12:07:22 GMT</pubDate>
      <description>
      <![CDATA[<p>本記事は<a href="https://www.meteor.com/tutorials/blaze/deploying-your-app" target="_blank" rel="external">公式チュートリアル6</a>の内容に沿って説明するものです。</p>]]>
      </description>
      <content:encoded><![CDATA[<p>本記事は<a href="https://www.meteor.com/tutorials/blaze/deploying-your-app" target="_blank" rel="external">公式チュートリアル6</a>の内容に沿って説明するものです。</p>
<h2 id="チュートリアルの目次">チュートリアルの目次</h2><ol>
<li><a href="http://meteor-fan.axlight.com/creating-first-meteor-app/">初めてのMeteorアプリ作成</a></li>
<li><a href="http://meteor-fan.axlight.com/first-spacebars-template/">初めてのMeteor Spacebarsでテンプレート</a></li>
<li><a href="http://meteor-fan.axlight.com/first-meteor-mongo/">初めてのMeteor Mongoコレクション</a></li>
<li><a href="http://meteor-fan.axlight.com/first-meteor-forms/">初めてのフォームとイベント処理</a></li>
<li><a href="http://meteor-fan.axlight.com/first-collection-update-in-meteor/">Meteorで初めてのコレクション更新と削除</a></li>
<li>初めてのMeteorアプリのデプロイ (←とうとうここまで来た)</li>
</ol>
<h2 id="Meteorのクラウドサーバ">Meteorのクラウドサーバ</h2><p>自分が作成したアプリを簡単に公開できるようにMeteorがクラウドサーバを用意してくれています。しかも、無料で使えます。今後のどのようになるかは分かりませんが、テスト用途や永続性がそれほど重要ではないアプリの場合は当面は使えるのではないでしょうか。</p>
<h2 id="実際にデプロイしてみる">実際にデプロイしてみる</h2><p>アプリのプロジェクトディレクトリで、</p>
<pre><code>meteor deploy sample-app<span class="class">.meteor</span><span class="class">.com</span>
</code></pre><p>と入力して実行してください。しばらくすると完了するはずです。<code>sample-app</code>のところは適宜変更してください。</p>
<p>既にデプロイ先が存在していて、別の開発者に所属している場合は、エラーになると思います。その場合は、デプロイ先の名前(上記の<code>sample-app</code>のところ)を変更してみてください。</p>
<h2 id="サイトにアクセスする">サイトにアクセスする</h2><p><a href="http://sample-app.meteor.com/" target="_blank" rel="external">http://sample-app.meteor.com/</a></p>
<p>をブラウザで開きましょう。今までローカルで動かしていたものと全く同じものが動いているはずです。ただし、データベースは異なりますので、中身は空の状態でしょう。</p>
<h2 id="開発者アカウント">開発者アカウント</h2><p>初めてアプリをデプロイした際に電子メールアドレスを聞かれるかもしれません。手順に従うと開発者アカウントを作ることができます。開発者アカウントを作るとデプロイしたアプリに権限を設定することができ、自分もしくは権限を付与した開発者のみがアプリを操作できるようになります。</p>
<p>詳しくは<a href="http://docs.meteor.com/#/full/meteordeploy" target="_blank" rel="external">ドキュメント</a>を参照。</p>
<h2 id="次のステップ">次のステップ</h2><p>ここまででチュートリアルの前半は終了です。後半はユーザ認証やデータベースの同期制御などより実際的な機能を学びます。</p>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/deploying-first-meteor-app/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[MeteorでFamousを使うfamous-viewsの紹介]]></title>
      <link>http://meteor-fan.axlight.com/meteor-famous-integration-intro/</link>
      <guid>http://meteor-fan.axlight.com/meteor-famous-integration-intro/</guid>
      <pubDate>Tue, 04 Aug 2015 14:29:26 GMT</pubDate>
      <description>
      <![CDATA[<p><a href="http://info.meteor.com/blog/june-devshop-london-famousviews-and-the-internet-of-things" target="_blank" rel="external">2015/7/24]]>
      </description>
      <content:encoded><![CDATA[<p><a href="http://info.meteor.com/blog/june-devshop-london-famousviews-and-the-internet-of-things" target="_blank" rel="external">2015/7/24のMeteorの公式ブログ</a>で、famous-viewsが取り上げられていましたので紹介します。</p>
<h2 id="Famousとは">Famousとは</h2><p><a href="http://famous.org/" target="_blank" rel="external">Famous</a>は、とてもユニークなJavaScriptのレンダリングエンジンです。機会があればもっと紹介したいところですが、一言で言うとアニメーションをふんだんに使ったユーザインタフェースを作れるライブラリであり、デスクトップでもモバイルでも高速で動くことが強みです。DOMはフラットにしてCSSの3d transformを使って配置することでGPUアクセラレーションが活用できるとのことです。</p>
<h2 id="famous-viewsとは">famous-viewsとは</h2><p><a href="https://famous-views.meteor.com/" target="_blank" rel="external">famous-views</a>はMeteorのBlazeと連携して簡単にFamousを使えるようにするライブラリです。Meteorの一つのコードでデスクトップでもモバイルでも動くアプリを作れる強みと、Famousの一つの仕組みでデスクトップでもモバイルでも高速に動く描画機能は、ベストマッチと言えるかもしれません。Meteorで素のFamousを使うこともできますが、famous-viewsを使うとBlazeと融合してとてもMeteorらしくコーディングができます。</p>
<h2 id="開発者のトーク">開発者のトーク</h2><p>ライブデモが見ものです。45分と長いですがぜひご覧ください。</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/zR63GD9aeKw" frameborder="0" allowfullscreen></iframe>

<h2 id="今後の展望と感想">今後の展望と感想</h2><p>Famousは開発が進んでいて、v0.5という新しいバージョンが<a href="https://blog.famous.org/getting-started" target="_blank" rel="external">登場しました</a>。加えて、Famous Frameworkというウィジェットのライブラリも開発中のようです。famous-viewsも新バージョンに対応するとのことです。</p>
<p>Famousは以前から注目していました。当初のふれこみからペースダウンしていたのですが、最近はやる気を出してきたように見えます。famous-viewsを使うと、画面の一部分だけにFamousを使うなど柔軟な使い方が簡単にできるのがよいです。MeteorのViewとしては、最近AngularやReactが注目されていますが、Blazeの付加価値が上がるのではないでしょうか。</p>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/meteor-famous-integration-intro/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Meteorで初めてのコレクション更新と削除]]></title>
      <link>http://meteor-fan.axlight.com/first-collection-update-in-meteor/</link>
      <guid>http://meteor-fan.axlight.com/first-collection-update-in-meteor/</guid>
      <pubDate>Mon, 03 Aug 2015 13:30:50 GMT</pubDate>
      <description>
      <![CDATA[<p>本記事は<a href="https://www.meteor.com/tutorials/blaze/update-and-remove" target="_blank" rel="external">公式チュートリアル5</a>の内容に沿って説明するものです。</p>
]]>
      </description>
      <content:encoded><![CDATA[<p>本記事は<a href="https://www.meteor.com/tutorials/blaze/update-and-remove" target="_blank" rel="external">公式チュートリアル5</a>の内容に沿って説明するものです。</p>
<h2 id="チュートリアルの目次">チュートリアルの目次</h2><ol>
<li><a href="http://meteor-fan.axlight.com/creating-first-meteor-app/">初めてのMeteorアプリ作成</a></li>
<li><a href="http://meteor-fan.axlight.com/first-spacebars-template/">初めてのMeteor Spacebarsでテンプレート</a></li>
<li><a href="http://meteor-fan.axlight.com/first-meteor-mongo/">初めてのMeteor Mongoコレクション</a></li>
<li><a href="http://meteor-fan.axlight.com/first-meteor-forms/">初めてのフォームとイベント処理</a></li>
<li>Meteorで初めてのコレクション更新と削除 (←今ここ)</li>
</ol>
<h2 id="チェックボックスと削除ボタンを追加する">チェックボックスと削除ボタンを追加する</h2><p>これまではデータ(ドキュメント)を追加するのみでしたが、今回は更新や削除を学びましょう。タスクのチェックボックスはそのタスクが完了したかどうかを意味します。</p>
<p>sample-app.htmlの中のtaskテンプレートを次のようにしましょう。</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">template</span> name=<span class="string">"task"</span>&gt;</span><br><span class="line">  &lt;li class=<span class="string">"&#123;&#123;#if checked&#125;&#125;checked&#123;&#123;/if&#125;&#125;"</span>&gt;</span><br><span class="line">    &lt;button class=<span class="string">"delete"</span>&gt;&amp;times;&lt;/button&gt;</span><br><span class="line">    &lt;input <span class="keyword">type</span>=<span class="string">"checkbox"</span> checked=<span class="string">"&#123;&#123;checked&#125;&#125;"</span> class=<span class="string">"toggle-checked"</span> /&gt;</span><br><span class="line">    &lt;span class=<span class="string">"text"</span>&gt;&#123;&#123;text&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br></pre></td></tr></table></figure>
<p>変更後のファイルは、<a href="https://github.com/meteor/simple-todos/blob/5cdfa73dcd1a1973bf31e76ffb0e6af96d9a2d8a/simple-todos.html" target="_blank" rel="external">こちら</a>と同じになっているはずなので確認しましょう。</p>
<p>画面上にもチェックボックスとボタンが追加されていることを確認しましょう。meteorが既に起動されている必要があります。現時点ではこれらは機能しません。</p>
<h2 id="チェックボックスと削除ボタンの処理を追加する">チェックボックスと削除ボタンの処理を追加する</h2><p>次にこれらの機能のイベント処理を追加しましょう。下記をsample-app.jsの<code>if (Meteor.isClient) {}</code>ブロック内に追加してください。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Template.task.events(&#123;</span><br><span class="line">  <span class="string">"click .toggle-checked"</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    Tasks.update(<span class="keyword">this</span>._id, &#123;</span><br><span class="line">      $<span class="keyword">set</span>: &#123;checked: ! <span class="keyword">this</span>.checked&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"click .delete"</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    Tasks.remove(<span class="keyword">this</span>._id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>変更後のファイルは、<a href="https://github.com/meteor/simple-todos/blob/383896358ebfb53c237a8611fc11a86aa71fbbf6/simple-todos.js" target="_blank" rel="external">こちら</a>と同じになっているはずです。ただし、コメント行は省略しています。</p>
<p>今回はtaskテンプレートにイベント処理を追加しました。対象がtaskテンプレートとなっているからです。2つとも<code>click</code>イベントでそれぞれclass名で対象を特定しています。それぞれの関数の中身を見ていきましょう。</p>
<p>まず、チェックボックス(<code>.toggle-checked</code>)の方は、<code>Tasks.update()</code>によってデータを更新しています。このとき、第一引数にidを渡し、第二引数にupdateオブジェクトを渡します。<code>this</code>が分かりにくいですが、この関数が呼ばれた所でのtaskオブジェクトを指しています。ここでは、<code>checked</code>というプロパティにチェックボックスの値を入れています。とても分かりにくいですが、<code>this.checked</code>がチェックボックスの値で変更前のものを指します。updateに関する詳しいドュメントは<a href="http://docs.meteor.com/#/full/update" target="_blank" rel="external">こちら</a>から。</p>
<p>次に、削除ボタン(<code>.delete</code>)の方は、<code>Tasks.remove()</code>によってデータを削除しています。引数にはidを渡しています。updateより簡単なので、updateが理解できていれば分かると思います。</p>
<p>Node.jsやMongoDBに慣れている方はcallbackがないことを不思議に思うかもしれませんが、実はcallbackを書くこともできます。しかし、通常はデータ(やコレクション)自体はリアクティブに更新されますので、callbackを使うのはエラー処理をする場合などに限られます。</p>
<h2 id="実際の動作を確認する">実際の動作を確認する</h2><p>上記2つの修正が完了したら動作するはずです。チェックボックスをチェックすると表示が変わるのが分かると思います(CSSが正しく設定できていれば)。これが表示上の変更だけでなく、mongoデータベースもちんと更新されていることを確認するため、ブラウザをリロードしてみてください。</p>
<p>削除ボタンも試してみてください。すぐ消えます。拡張としては確認ダイアログを出すなどが考えられますね。</p>
<h2 id="checkedのクラス指定について補足">checkedのクラス指定について補足</h2><p>今回追加したHTMLに</p>
<pre><code>&lt;li class="&#x7b;&#x7b;#if checked}}checked&#x7b;&#x7b;/if}}"&gt;</code></pre>

<p>というものがありますが、これはtaskオブジェクトのcheckedプロパティがtrueのときにcheckedクラスを設定するというものです。すなわち、</p>
<pre><code>&lt;li <span class="keyword">class</span>=<span class="string">"checked"</span>&gt;
</code></pre><p>と同じになります。一つcheckedプロパティがfalseであったり、そもそもcheckedプロパティが存在しない場合は、</p>
<pre><code>&lt;li <span class="keyword">class</span>=<span class="string">""</span>&gt;
</code></pre><p>と同じになります。</p>
<h2 id="次のステップ">次のステップ</h2><p>これでアプリの基本機能は完成です。次のステップでは、アプリをクラウドサーバにデプロイする方法を学びましょう。</p>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/first-collection-update-in-meteor/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[meteor debugでnode-inspectorを使ったデバッグ]]></title>
      <link>http://meteor-fan.axlight.com/meteor-debug/</link>
      <guid>http://meteor-fan.axlight.com/meteor-debug/</guid>
      <pubDate>Sun, 02 Aug 2015 13:00:17 GMT</pubDate>
      <description>
      <![CDATA[<p>「Meteorではどのようにデバッグするのですか」という素朴な質問に対しては、まだいい答えは見つけられていませんが、meteor debugというのがあるので簡単に説明します。内部的には<a href="https://github.com/node-inspector/n]]>
      </description>
      <content:encoded><![CDATA[<p>「Meteorではどのようにデバッグするのですか」という素朴な質問に対しては、まだいい答えは見つけられていませんが、meteor debugというのがあるので簡単に説明します。内部的には<a href="https://github.com/node-inspector/node-inspector" target="_blank" rel="external">node-inspector</a>を使っているようです。</p>
<h2 id="見つけ方">見つけ方</h2><p>Meteorでは、すべては<code>meteor</code>コマンドから始まります。ヘルプも<code>meteor</code>からというわけで、</p>
<pre><code>meteor <span class="built_in">help</span>
</code></pre><p>とします。debugというのがありました。</p>
<pre><code><span class="title">meteor</span> help <span class="built_in">debug</span>
</code></pre><p>とすると使い方が表示されます。</p>
<h2 id="使い方">使い方</h2><p><code>meteor help debug</code>で表示される説明を少し見てみます。</p>
<p>The server process will be suspended just before the first statement of server code that would normally execute.</p>
<p>サーバプロセスは通常最初に実行される文の直前で止まります。</p>
<p>In order to continue execution of server code, use either the web-based Node Inspector or the command-line debugger (further instructions will be printed in the console).</p>
<p>実行を再開するにはWebベースのNode Inspectorかコマンドラインのデバッガーを使います(詳細説明は、コンソールに表示されます)。</p>
<p>The easiest way to set breakpoints is to use the <code>debugger</code> keyword: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger</a></p>
<p>最も簡単な方法は<code>debugger</code>キーワードを使ってブレークポイントを設定することです。</p>
<h2 id="ドキュメント">ドキュメント</h2><p>以下のMeteorのドキュメントにもmeteor debugの説明があります。</p>
<p><a href="http://docs.meteor.com/#/full/meteordebug" target="_blank" rel="external">http://docs.meteor.com/#/full/meteordebug</a></p>
<p>しかし<code>meteor help debug</code>とあまり情報が変わりません。</p>
<h2 id="使ってみる">使ってみる</h2><pre><code><span class="title">meteor</span> <span class="built_in">debug</span>
</code></pre><p>で起動すると、Node Inspectorの接続先が表示されます。これにChromeでアクセスすると、コードの初期の部分で止まっています。そこからステップ実行すると、Meteorの内部に入って大変なので、アプリのコードに<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger" target="_blank" rel="external">debuggerキーワード</a>を入力する方がよいです。</p>
<p>というような説明が、コードが止まったところのコメントに書いてあるので、とても親切です。</p>
<p>Node InspectorはChromeのDeveloper Toolsを使ったことがあれば、同じような操作なのでそれほど苦労することはなさそうです。</p>
<h2 id="感想">感想</h2><p>Meteorのプラットフォームのデバッグや勉強のためには使えそうですが、アプリのデバッグには低レベルすぎるかと思いました。そもそもMeteorのコーディングは、手続き的ではなく、宣言的であるため、あまり実行順を意識しないと思います。今後、Meteorならではのデバッグツールが登場するとよいですね。既に出てきているかもしれません。</p>
<p>node-inspectorは単なるインタフェースなので、内部で使われているのは<a href="https://nodejs.org/api/debugger.html" target="_blank" rel="external">Node.js Debugger</a>と言うのがおそらく正しいですね。</p>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/meteor-debug/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Meteorで初めてのフォームとイベント処理]]></title>
      <link>http://meteor-fan.axlight.com/first-meteor-forms/</link>
      <guid>http://meteor-fan.axlight.com/first-meteor-forms/</guid>
      <pubDate>Sat, 01 Aug 2015 15:14:59 GMT</pubDate>
      <description>
      <![CDATA[<p>本記事は<a href="https://www.meteor.com/tutorials/blaze/forms-and-events" target="_blank" rel="external">公式チュートリアル4</a>の内容に沿って説明するものです。</p>
<]]>
      </description>
      <content:encoded><![CDATA[<p>本記事は<a href="https://www.meteor.com/tutorials/blaze/forms-and-events" target="_blank" rel="external">公式チュートリアル4</a>の内容に沿って説明するものです。</p>
<h2 id="チュートリアルの目次">チュートリアルの目次</h2><ol>
<li><a href="http://meteor-fan.axlight.com/creating-first-meteor-app/">初めてのMeteorアプリ作成</a></li>
<li><a href="http://meteor-fan.axlight.com/first-spacebars-template/">初めてのSpacebarsでテンプレート</a></li>
<li><a href="http://meteor-fan.axlight.com/first-meteor-mongo/">初めてのMeteor Mongoコレクション</a></li>
<li>初めてのフォームとイベント処理 (←今ここ)</li>
</ol>
<h2 id="フォームを追加する">フォームを追加する</h2><p>sample-app.htmlの中のheaderの中にフォームを追加しましょう。</p>
<pre><code>&lt;<span class="keyword">form</span> <span class="keyword">class</span>=<span class="string">"new-task"</span>&gt;
  &lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> name=<span class="string">"text"</span> placeholder=<span class="string">"Type to add new tasks"</span> /&gt;
&lt;/<span class="keyword">form</span>&gt;
</code></pre><p>HTMLの経験がある方は何の不自由もないと思います。class名が<code>new-task</code>になっていることに注意します。</p>
<p>変更後のファイルは、<a href="https://github.com/meteor/simple-todos/blob/8434ab7042eb750c50ab58efd7231f1c97c630ed/simple-todos.html" target="_blank" rel="external">こちら</a>と同じになっているはずなので確認しましょう。</p>
<p>画面上にもフォームが追加されていることを確認しましょう。meteorが既に起動されている必要があります。現時点ではフォームに入力しても何も起きません。</p>
<h2 id="イベントの処理を追加する">イベントの処理を追加する</h2><p>次にフォームに入力した際のイベント処理を追加しましょう。フォームにテキストを入力してエンターキーを押すとsubmitイベントが発生します。下記をsample-app.jsの<code>if (Meteor.isClient) {}</code>ブロック内に追加してください。</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Template.body.events(&#123;</span><br><span class="line">  <span class="string">"submit .new-task"</span>: function (<span class="keyword">event</span>) &#123;</span><br><span class="line">    <span class="keyword">event</span>.preventDefault();</span><br><span class="line">    var <span class="keyword">text</span> = <span class="keyword">event</span>.target.<span class="keyword">text</span>.value;</span><br><span class="line">    Tasks.insert(&#123;</span><br><span class="line">      <span class="keyword">text</span>: <span class="keyword">text</span>,</span><br><span class="line">      createdAt: new Date() <span class="comment">// current time</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">event</span>.target.<span class="keyword">text</span>.value = <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>変更後のファイルは、<a href="https://github.com/meteor/simple-todos/blob/7a1ace1482bbdd5ce38aa5db28ecb20ce0e12863/simple-todos.js" target="_blank" rel="external">こちら</a>と同じになっているはずです。ただし、コメント行は省略しています。</p>
<p>bodyテンプレートのイベントリストに”submit .new-task”を定義しました。ここで定義した関数がフォームに入力してsubmitされた際に呼ばれます。フォームに入力した値は、<code>event.target.text.value</code>で取得できます。ここで、<code>text</code>はフォームの<code>&lt;input&gt;</code>のname属性です。</p>
<p>mongoコレクションへの登録は、<code>Tasks.insert</code>を使います。今回の例では、textの他にcreatedAtもプロパティとして登録しています。mongoではこのように自由にデータ(ドキュメント)のプロパティを登録できます。</p>
<h2 id="実際の動作を確認する">実際の動作を確認する</h2><p>上記2つの修正が完了したら動作するはずです。表示部分はすでにこれまでのチュートリアルで作成したものでできています。</p>
<p>フォームにいろいろテキストを入力して登録してみましょう。すぐに反映されましたか。これもリアクティビティなのですが、難しい言葉を使わなくても直感的に理解できるかと思います。</p>
<h2 id="タスクをソートする">タスクをソートする</h2><p>現状では新しいタスクが順序的に下に表示されているはずです。せっかくなので新しいタスクが上に表示されるようにしましょう。</p>
<p>sample-app.jsの</p>
<pre><code><span class="function"><span class="keyword">return</span> Tasks.<span class="title">find</span><span class="params">({})</span></span>;
</code></pre><p>を</p>
<pre><code><span class="tag">return</span> <span class="tag">Tasks</span><span class="class">.find</span>({}, {<span class="tag">sort</span>: {<span class="attribute">createdAt</span>: -<span class="number">1</span>}});
</code></pre><p>に変更してください。</p>
<p>変更後のファイルは、<a href="https://github.com/meteor/simple-todos/blob/a06c2235fa31bb876edc2f62ba62310dee40ab6c/simple-todos.js" target="_blank" rel="external">こちら</a>と同じになっているはずです。ただし、コメント行は省略しています。</p>
<p>このようにsortオプションを指定するとcreatedAtの逆順になります。-1を1にすると降順から昇順になります。</p>
<p>さらに新しいタスクを追加してみて一番上の順序に表示されることを確認しましょう。</p>
<h2 id="次のステップ">次のステップ</h2><p>今回はフォームとイベント処理を追加してUIからデータを入力することができました。次のステップではデータの修正と削除の方法を学びます。</p>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/first-meteor-forms/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[30分以内でMeteorを紹介する公式ビデオ]]></title>
      <link>http://meteor-fan.axlight.com/30min-meteor-intro-video/</link>
      <guid>http://meteor-fan.axlight.com/30min-meteor-intro-video/</guid>
      <pubDate>Sat, 01 Aug 2015 13:27:04 GMT</pubDate>
      <description>
      <![CDATA[<p>Meteorを紹介するビデオが公開されたので紹介します。</p>
<p>20分以上ある長いビデオですが、最新情報やデモも含まれていて参考になります。Rev-1.0となっているので今後も更新されるかもしれません。</p>
<iframe width="560" height=]]>
      </description>
      <content:encoded><![CDATA[<p>Meteorを紹介するビデオが公開されたので紹介します。</p>
<p>20分以上ある長いビデオですが、最新情報やデモも含まれていて参考になります。Rev-1.0となっているので今後も更新されるかもしれません。</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/dOCMpoeuwTI" frameborder="0" allowfullscreen></iframe>

<p>導入部だけ翻訳しましたのでご参考にどうぞ。</p>
<h2 id="Meteor_(タイトル)">Meteor (タイトル)</h2><p>I’m Robert Dickert and I’m here to talk to you about Meteor.</p>
<p>私はロバート・ディカートです。今日はミーティアについてお話しします。</p>
<h2 id="What_we’ll_cover_(話す内容)">What we’ll cover (話す内容)</h2><p>Today, we’re going to do a broad overview of Meteor.</p>
<p>今日は、ミーティアの全体像を概観します。</p>
<p>We talk about what it is, while you might want to consider it,<br>and we’ll do a code demo.</p>
<p>ミーティアがどういうものであり、なぜ気にする必要があるのかをお話し、コードデモを行います。</p>
<p>And talk about who’s using it, who’s behind it, and what’s next. so let’s get started.</p>
<p>その後、誰がミーティアを使っているか、誰がミーティアを作っているか、これからどうなるのかをお話しします。さあ、始めましょう。</p>
<h2 id="What_is_Meteor?_(ミーティアとは何か)">What is Meteor? (ミーティアとは何か)</h2><p>So what is Meteor?</p>
<p>さて、ミーティアとは何でしょうか。</p>
<p>Meteor is a full stack open source platform for building web and mobile apps in JavaScript.</p>
<p>ミーティアはフルスタックでオープンソースのプラットフォームであり、JavaScriptでWebアプリやモバイルアプリを作るためのものです。</p>
<p>With Meteor, you can write your whole code in pure JavaScript, front-end and back-end. </p>
<p>ミーティアではすべてのコードをJavaScriptのみで書くことができます。フロントエンドもバックエンドもです。</p>
<p>From the single JavaScript code base you could target iOS, Android and the web.</p>
<p>一つのJavaScriptコードからiOS向け、アンドロイド向け、Web向けに展開可能です。</p>
<p>Meteor is made of packages, and it’s MIT licensed, so it’s very open an extensible.</p>
<p>ミーティアは複数のパッケージで構成され、MITライセンスで公開されています。よって、とてもオープンで拡張性があります。</p>
<p>And because it was designed to link, you get started in productive very quickly.</p>
<p>また、とてもうまく設計されているため、すぐに生産性が上がります。</p>
<p>For example, the app pictured on the right is a demo that implements a collaborative mobile app in less than a thousand lines of JavaScript.</p>
<p>例えば、右上の画像(ビデオ中の)アプリは共同作業のモバイルアプリのデモですが、1000行未満のJavaScriptコードで書かれています。</p>
<p>In short, the goal of Meteor is to allow you to build advanced apps quickly with a small team allowing even individuals to achieve things that used to be possible only a large companies like Google and Facebook.</p>
<p>一言で言うと、ミーティアのゴールは小さいチームですばやく先進的なアプリを開発できるようにすることです。さらには、これまでGoogleやFacebookなどの大きな会社だけができていたようなことを個人でもできるようにすることです。</p>
<p>so how does Meteor do this?</p>
<p>さて、ミーティアはどのようにこれを実現するのでしょうか。</p>
<p>Let’s step through Meteor’s components.</p>
<p>ミーティアの要素を見ていきましょう。</p>
<p>It has a command-line tool which allows you to create, edit and deploy apps.</p>
<p>アプリを作成、編集、公開することができるコマンドラインツールがあります。</p>
<p>It has a view layer which by default as Meteor’s Blaze package, but you can use any framework you want such as Angular React, and Famous.</p>
<p>標準のBlazeというビュー層があります。これは、お好みで、AngularやReactやFamousなどの他のフレームワークを使うこともできます。</p>
<p>Livequery takes a production database like MongoDB and transforms it into a real time database.</p>
<p>ライブクエリはMongoDBのような既存のデータベースをリアルタイムデータベースに変換します。</p>
<p>You can think of it like an open source version firebase.</p>
<p>Firebaseのオープンソース版と考えてもらえればよいでしょう。</p>
<p>Meteor has a full stack package system that coordinates server, client and mobile code bases and is hosted on atmospherejs.com.</p>
<p>ミーティアにはフルスタックのパッケージシステムがあります。サーバコード、クライアントコード、モバイルコードがそろっていて、atmospherejs.comにまとめられています。</p>
<p>And it has a built system that includes not just client and browser but also mobile.</p>
<p>最後に、ミーティアにはビルドシステムがあり、クライアントやブラウザだけでなくモバイルも対象にしています。</p>
<h2 id="“Why_Meteor?”_(なぜミーティアか)">“Why Meteor?” (なぜミーティアか)</h2><p>Everyone here probably has a framework<br>that they’re already comfortable with.</p>
<p>みなさんは既にご自分が気に入ったフレームワークを使っていることと思います。</p>
<p>So why would you want to consider trying Meteor.</p>
<p>そこでなぜ新しいミーティアを検討する必要があるでしょうか。</p>
<p>To begin with, table stakes for app functionality have changed a lot over the last five to ten years.</p>
<p>まず、ここ5年から10年でアプリの機能に必要となるコストが大きく変わったことがあげられます。</p>
<p>We went from a place where all users came to sites on desktop browsers to the majority now arrives on mobile.</p>
<p>以前は、ユーザがデスクトップのブラウザでサイトにいるだけでしたが、今では大多数はモバイルです。</p>
<p>We went from where we didn’t mind hitting the refresh button to get updates to where we expect to be notified live.</p>
<p>また、以前はページを更新するのにリロードボタンを押すことは普通でしたが、今では瞬時に通知されることを期待します。</p>
<p>We went for being a group individuals consuming content to being a collaborative team that can create and change that content together.</p>
<p>以前は一人ひとりの個人がコンテンツを消費するだけでしたが、今ではチームが一つのコンテンツを共同で作成し修正します。</p>
<p>And we went from support web links and forms to where we expect our web app to have a UI that’s as good as native apps.</p>
<p>以前はリンクとフォームのUIでしたが、今ではネイティブアプリと同じようによいUIを持ったアプリが求められます。</p>
<p>This started with apps like Twitter which notifies you with the scrolling alert<br>when there are new tweets in the conversation.</p>
<p>これはツイッターのようなアプリが新しい更新があるときに通知することから始まりました。</p>
<p>This is pretty easy to do and most frameworks by pulling the server and it’s okay if the notification comes in a few seconds after new tweets come in.</p>
<p>これ自体はほとんどのフレームワークで簡単に実現でき、サーバから定期的に取得するだけです。これは更新から通知が数秒かかってよい場合は問題ありません。</p>
<p>But things have become more complicated.</p>
<p>しかし状況はもう少し複雑になってきました。</p>
<p>This is Trello.</p>
<p>これ(ビデオ中の)はTrelloです。</p>
<p>We have two users one on top and one on bottom.</p>
<p>2人のユーザが上下に分かれています。</p>
<p>When the top user adds some text and hits enter the other user immediately<br>sees the text appear as a card.</p>
<p>上のユーザがテキストを入力してエンターキーを置すと、下のユーザは瞬時にそのテキストをカードとして見ることができます。</p>
<p>Then, the first user can drag my card and the user at the bottom can see it move.</p>
<p>そして上のユーザがカードをドラッグすると、下のユーザは動いているのみ見ることができます。</p>
<p>This is a more sophisticated UI.</p>
<p>これはだいぶ洗練されたUIです。</p>
<p>Also those people may be talking live on<br>the phone or maybe on a hangout.</p>
<p>この2人のユーザは電話かハングアウトで会話中かもしれません。</p>
<p>So it’s important that the changes be reflected immediately.</p>
<p>つまり変更が瞬時に反映されることは重要なのです。</p>
<p>There’s a lot going on here and managing it can get really complex.</p>
<p>これは内部では複雑なことをしていて管理するのは大変です。</p>
<p>The Trello’s own words. “We’ve bred all over it”.</p>
<p>Trelloの言葉としてこれがあります。「私たちはこれを完全に作り上げた」</p>
<p>The problem is that we started with support frameworks that<br>were designed for the way the web used to be.</p>
<p>問題は、我々が旧来のwebを想定して設計されたフレームワークにこれらの機能を追加し始めたことです。</p>
<p>And we’re adding more and more tools to them, spending much more time integrating them.</p>
<p>そして旧来のフレームワークに次々と機能を追加し、それに多大な時間をかけていることです。</p>
<p>This is why Meteor was created to bring together collection well integrated tools allowing you to build highly interactive apps with much less code.</p>
<p>これがミーティアが開発された理由です。インタラクティブなアプリを少ないコードで開発するためのツールを統合したフレームワーク、それがミーティアです。</p>
<p>(ビデオは、デモ紹介へと続きます)</p>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/30min-meteor-intro-video/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[初めてのMeteor Mongoコレクション]]></title>
      <link>http://meteor-fan.axlight.com/first-meteor-mongo/</link>
      <guid>http://meteor-fan.axlight.com/first-meteor-mongo/</guid>
      <pubDate>Fri, 31 Jul 2015 13:02:05 GMT</pubDate>
      <description>
      <![CDATA[<p>本記事は<a href="https://www.meteor.com/tutorials/blaze/collections" target="_blank" rel="external">公式チュートリアル3</a>の内容に沿って説明するものです。</p>
<h2 id]]>
      </description>
      <content:encoded><![CDATA[<p>本記事は<a href="https://www.meteor.com/tutorials/blaze/collections" target="_blank" rel="external">公式チュートリアル3</a>の内容に沿って説明するものです。</p>
<h2 id="チュートリアルの目次">チュートリアルの目次</h2><ol>
<li><a href="http://meteor-fan.axlight.com/creating-first-meteor-app/">初めてのMeteorアプリ作成</a></li>
<li><a href="http://meteor-fan.axlight.com/first-spacebars-template/">初めてのMeteor Spacebarsでテンプレート</a></li>
<li>初めてのMeteor Mongoコレクション (←今ここ)</li>
</ol>
<h2 id="コレクションを定義する">コレクションを定義する</h2><p>ここからがMeteorのすごいところです。sample-app.jsの先頭に次のように書きましょう。</p>
<pre><code>Tasks = <span class="keyword">new</span> Mongo.Collection(<span class="string">"tasks"</span>);
</code></pre><p>これがコレクションの定義です。コレクションとはデータ(ドキュメント)を入れる「箱」のようなものです。ここに書くとサーバ側でもクライアント側でも使えるようになります。</p>
<h2 id="mongoシェルからデータを追加する">mongoシェルからデータを追加する</h2><p>mongoのシェルを起動するには、ターミナルから次のようにしてください。Meteorのプロジェクトフォルダで実行する必要があります。</p>
<pre><code><span class="title">meteor</span> mongo
</code></pre><p>これで起動します。Meteorではアプリ毎に異なるポート番号でmongodが起動するため、このように起動します。</p>
<p>さて、mongoシェル内で次のようにデータを追加してみましょう。</p>
<pre><code><span class="tag">db</span><span class="class">.tasks</span><span class="class">.insert</span>(<span class="rules">{ <span class="rule"><span class="attribute">text</span>:<span class="value"> <span class="string">"Hello world!"</span>, createdAt: new <span class="function">Date</span>() })</span></span>;</span>
</code></pre><p><code>db</code>のあとに来る<code>tasks</code>がコレクションです。insertの中身はJSONのオブジェクトになります。ここで、下記のようにすると追加したデータを見ることができます。</p>
<pre><code><span class="tag">db</span><span class="class">.tasks</span><span class="class">.find</span>(<span class="rules">{}</span>);
</code></pre><p>コレクションの詳しいAPIは、<a href="http://docs.meteor.com/#/basic/collections" target="_blank" rel="external">Meteorのドキュメント</a>にありますので、今後参照にするとよいでしょう。また、基本的には、MongoDBのコレクションと同じですので、MongoDBのドキュメントや解説も参考になります。</p>
<p>mongoシェルは、</p>
<pre><code><span class="keyword">exit</span>
</code></pre><p>と打つと終了することができます。</p>
<h2 id="コレクションのデータを表示する">コレクションのデータを表示する</h2><p>上記で追加したデータをMeteorのアプリ上で表示させたいと思います。まず、Meteorアプリは立ち上げておきましょう。sample-app.jsのtasksの定義を次のように変更します。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">Template</span><span class="class">.body</span><span class="class">.helpers</span>(<span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">tasks</span>:<span class="value"> function () &#123;</span><br><span class="line">    return Tasks.<span class="function">find</span>(&#123;&#125;)</span></span>;</span><br><span class="line">  &#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>正確には変更するのは3行のみです。以前あった配列での定義を置き換えています。この修正をしてファイル保存すると、コードホットプッシュにより、アプリ側の表示も更新されているはずです。”Hello World!”の一つになったら成功です。</p>
<p>変更されたsample-app.jsは、<a href="https://github.com/meteor/simple-todos/blob/f78906af3d2d15fdb1851ff28122f9e08bc4ac9f/simple-todos.js" target="_blank" rel="external">こちら</a>と同じになっているはずなので確認しましょう。</p>
<h2 id="リアクティビティを体験する">リアクティビティを体験する</h2><p>もう一度mongoシェルを起動しましょう。Meteorアプリは起動したままがよいので、新しいターミナルを立ち上げることになります。</p>
<pre><code><span class="title">meteor</span> mongo
</code></pre><p>で起動したら<code>tasks</code>コレクションに新しいデータを追加してみましょう。</p>
<pre><code><span class="tag">db</span><span class="class">.tasks</span><span class="class">.insert</span>(<span class="rules">{ <span class="rule"><span class="attribute">text</span>:<span class="value"> <span class="string">"task 1 from shell"</span>, createdAt: new <span class="function">Date</span>() })</span></span>;</span>
</code></pre><p>これの入力が終わると即座にMeteorアプリ側に反映されるはずです。ブラウザ上の表示が変わったことに気づいたでしょうか。<code>&quot;task 1 from shell&quot;</code>の部分を変更してもう何件かデータを追加してみてください。ブラウザに反映されるまでの時間も体験できるかと思います。</p>
<h2 id="次のステップ">次のステップ</h2><p>今回はmongoシェルでデータを入力しましたが、次のステップではアプリのUIから新しいデータを入力するやり方を見ていきましょう。</p>
]]></content:encoded>
      <comments>http://meteor-fan.axlight.com/first-meteor-mongo/#disqus_comments</comments>
    </item>
    
  </channel>
</rss>